%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: z122-01.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: Myst
%%CreationDate: 7/17/2018
%%BoundingBox: 0 0 550 450
%%HiResBoundingBox: 0 0 550 450
%%CropBox: 0 0 550 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">z122</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-07-17T13:22:12+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-07-17T13:22:12+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-07-17T13:22:12+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>212</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgA1AEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A61m1eXdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirHPPHnzQ/J2mJe6mWeSYlbW&#xA;0ioZJWWhbjWgAUHcn9ZGQnkERu3YcEshoJJ5b/NO81SCK+v/ACzqGmaLOwEesFTLbAH7LyNxQrGT&#xA;tzAKg9TTfKI6yBlwnm5mTszJGPEN2fZlOtdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirAfzG/Lq883eYfK84UzaVYXDjVoagUgcoxZR9r4vT4NSvU&#xA;eGYGvnwgd+7uOyY8RPdsz5tYX9EXMbW1twVvq1vaJ6rxtEaR/GrQxkJufsqVp3zSeDK3ovHjShYQ&#xA;S29hbQTEmaKKNJCSSeSqAak7nOmwz4oAvGamHDkkPNXyxodirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVVIJnhkDr26jxHhlWfCMkTEuRptRLDMSH9qby&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:e4417d81-9e8b-4246-8f5b-c46186980f49</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:e4417d81-9e8b-4246-8f5b-c46186980f49</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:c681e94c-ba38-d24d-89ba-9f8f242060c2</stRef:instanceID>
            <stRef:documentID>xmp.did:c681e94c-ba38-d24d-89ba-9f8f242060c2</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:49a1d3da-55e3-c847-abfd-0bffe658a3b0</stEvt:instanceID>
                  <stEvt:when>2018-07-16T09:04:54+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e4417d81-9e8b-4246-8f5b-c46186980f49</stEvt:instanceID>
                  <stEvt:when>2018-07-17T13:22:12+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>550.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
550 450 li
550 0 li
cp
clp
550 450 mo
0 450 li
0 0 li
550 0 li
550 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.576471 .839216 .898039 rgb
f
275 423.585 mo
149.736 423.585 48.189 417.037 48.189 408.96 cv
48.189 405.718 64.5536 402.722 92.2464 400.297 cv
91.8433 403.743 91.563 406.411 91.4634 407.905 cv
88.2473 407.813 84.9716 407.671 81.6431 407.478 cv
76.8363 407.166 71.8892 406.72 66.8133 406.142 cv
66.7526 406.134 66.6926 406.131 66.633 406.131 cv
65.8813 406.131 65.2396 406.699 65.1532 407.462 cv
65.0595 408.285 65.6503 409.028 66.4735 409.122 cv
71.2963 409.672 76.0002 410.103 80.5853 410.415 cv
80.6296 410.421 80.6746 410.426 80.7202 410.429 cv
80.9509 410.443 81.1817 410.456 81.4119 410.47 cv
85.0395 410.706 88.5929 410.868 92.0711 410.955 cv
92.0074 413.945 li
96.9484 413.945 li
96.8712 412.629 li
99.512 413.933 103.691 414.111 106.557 414.111 cv
121.106 413.945 li
121.106 413.933 li
121.106 412.527 120.101 411.33 118.719 411.068 cv
117.907 410.914 117.058 410.741 116.197 410.556 cv
120.589 410.289 124.855 409.909 128.994 409.416 cv
128.978 410.322 li
130.326 410.278 li
130.248 413.945 li
135.189 413.945 li
135.111 412.629 li
137.752 413.933 141.932 414.111 144.797 414.111 cv
159.347 413.945 li
159.347 412.534 158.327 411.329 156.937 411.09 cv
153.73 410.54 150.889 409.907 149.315 409.536 cv
149.288 408.687 149.272 407.439 149.265 405.865 cv
159.693 403.384 169.101 400.012 177.474 395.752 cv
207.015 394.844 240.09 394.335 275 394.335 cv
350.706 394.335 417.751 396.727 458.95 400.402 cv
462.573 409.354 li
469.41 408.595 li
466.379 401.108 li
488.813 403.376 501.811 406.07 501.811 408.96 cv
501.811 417.037 400.264 423.585 275 423.585 cv
111.859 407.589 mo
112.986 398.725 li
118.144 398.386 123.56 398.062 129.206 397.756 cv
129.064 405.573 li
123.613 406.516 117.877 407.188 111.859 407.589 cv
156.042 400.967 mo
159.479 399.514 162.754 397.903 165.859 396.136 cv
167.198 396.089 168.534 396.043 169.89 395.997 cv
165.531 397.872 160.915 399.529 156.042 400.967 cv
149.27 400.381 mo
149.275 399.249 149.283 398.047 149.292 396.785 cv
152.445 396.649 155.639 396.519 158.901 396.394 cv
155.84 397.861 152.628 399.191 149.27 400.381 cv
.490196 .713725 .764706 rgb
f
98.0634 411.03 mo
88.1694 411.03 77.6405 410.395 66.4735 409.122 cv
65.6503 409.028 65.0595 408.285 65.1532 407.462 cv
65.2464 406.639 65.9862 406.042 66.8133 406.142 cv
119.216 412.111 157.329 403.927 180.092 381.803 cv
204.231 358.343 201.872 327.099 201.846 326.785 cv
201.775 325.96 202.388 325.234 203.213 325.164 cv
204.033 325.085 204.764 325.705 204.835 326.531 cv
204.863 326.858 207.329 359.515 182.182 383.954 cv
163.65 401.965 135.429 411.029 98.0634 411.03 cv
.345098 .517647 .537255 rgb
f
100.092 411.03 mo
93.8546 411.03 87.398 410.83 80.7202 410.429 cv
79.8932 410.379 79.2632 409.669 79.3131 408.842 cv
79.3628 408.016 80.0742 407.385 80.8999 407.435 cv
135.409 410.702 174.951 400.511 198.434 377.13 cv
221.256 354.406 220.011 327.028 219.996 326.754 cv
219.949 325.927 220.583 325.22 221.41 325.173 cv
222.232 325.144 222.945 325.761 222.991 326.588 cv
223.056 327.761 224.317 355.592 200.551 379.256 cv
179.342 400.372 145.601 411.029 100.092 411.03 cv
.901961 .976471 .988235 rgb
f
338.85 401.885 mo
336.39 402.925 333.74 403.845 330.93 404.665 cv
330.56 404.775 330.19 404.885 329.81 404.985 cv
310.39 410.385 283.7 411.085 259.89 410.185 cv
259.21 410.155 258.54 410.125 257.87 410.095 cv
240.24 409.355 224.36 407.775 214.45 406.615 cv
210.74 406.185 208.89 401.845 211.19 398.895 cv
213.71 395.655 216.75 390.785 220.06 383.465 cv
229.47 362.645 218.76 344.445 218.76 344.445 cv
218.76 344.445 234.14 277.915 235.14 276.255 cv
236.14 274.585 336.04 259.565 329.95 277.975 cv
323.87 296.385 324.14 347.585 325.81 364.915 cv
326.94 376.715 335.34 388.205 340.58 394.345 cv
342.69 396.805 341.83 400.635 338.85 401.885 cv
cp
.87451 .941176 .956863 rgb
f
317.926 299.297 mo
317.926 299.297 257.811 370.531 223.85 366.621 cv
223.85 366.621 223.477 350.293 218.069 344.376 cv
218.069 344.376 232.292 347.049 248.176 341.317 cv
264.06 335.585 317.926 299.297 317.926 299.297 cv
cp
.168627 .168627 .168627 rgb
f
150.15 201.584 mo
151.307 202.584 152.144 222.264 152.144 222.264 cv
173.018 212.002 li
169.29 219.807 li
145.451 236.428 li
109.17 197.108 li
150.15 201.584 li
cp
.929412 .929412 .929412 rgb
f
172.12 205.297 mo
172.12 205.297 168.168 209.373 167.56 215.216 cv
166.994 220.652 168.977 225.135 168.977 225.135 cv
168.977 225.135 172.591 222.746 172.591 222.005 cv
172.591 221.265 172.12 205.297 172.12 205.297 cv
cp
.858824 .682353 .490196 rgb
f
263.497 82.085 mo
292.37 78.6908 li
299.511 88.335 li
260.573 96.177 li
263.497 82.085 li
cp
.909804 .976471 .976471 rgb
f
206.265 83.0733 mo
199.06 87.835 187.435 118.585 188.103 138.236 cv
188.194 140.903 196.18 131.26 196.18 131.26 cv
226.134 106.606 li
226.134 106.606 212.689 78.8283 206.265 83.0733 cv
cp
f
236.095 63.5382 mo
236.095 63.5382 239.938 74.9978 243.856 75.3418 cv
225.691 75.0241 li
225.691 75.0241 226.134 64.835 222.51 57.7765 cv
236.095 63.5382 li
cp
.988235 .839216 .694118 rgb
f
242.662 52.0171 mo
242.662 52.0171 245.683 46.7669 243.124 46.3165 cv
240.566 45.8661 234.243 57.2048 235.97 58.7218 cv
237.696 60.2389 242.662 52.0171 242.662 52.0171 cv
cp
.937255 .792157 .67451 rgb
f
235.68 62.5262 mo
235.68 62.5262 223.991 60.0513 226.637 62.8455 cv
229.93 66.3238 236.881 65.6505 236.881 65.6505 cv
235.68 62.5262 li
cp
.756863 .588235 .419608 rgb
f
240.94 47.625 mo
238.18 53.995 230.78 56.915 224.42 54.165 cv
220.65 52.535 217.56 50.095 216.66 46.405 cv
216.41 45.385 215.55 43.445 214.97 40.995 cv
214.88 40.625 214.81 40.265 214.76 39.895 cv
214.7 39.555 214.66 39.205 214.64 38.855 cv
214.63 38.725 li
214.62 38.415 214.6 38.115 214.62 37.805 cv
214.64 36.015 215.05 34.275 215.91 32.735 cv
216 32.555 216.1 32.385 216.21 32.215 cv
216.24 32.165 li
216.34 32.005 216.45 31.845 216.57 31.695 cv
216.92 31.195 217.33 30.735 217.79 30.305 cv
218.63 29.515 219.6 28.795 220.62 28.195 cv
220.8 28.085 220.97 27.985 221.15 27.885 cv
221.17 27.875 li
221.34 27.785 221.52 27.695 221.7 27.605 cv
223.12 26.915 224.59 26.485 225.96 26.435 cv
226.24 26.415 226.51 26.415 226.79 26.415 cv
227 26.415 227.22 26.415 227.43 26.425 cv
227.56 26.425 li
227.77 26.435 227.99 26.445 228.2 26.465 cv
230.49 26.615 232.54 27.135 234.25 27.935 cv
234.44 28.025 234.62 28.115 234.8 28.205 cv
234.99 28.315 li
235.18 28.415 235.36 28.525 235.53 28.635 cv
236.84 29.425 237.88 30.405 238.6 31.505 cv
239.86 33.425 241.33 36.285 241.86 39.555 cv
241.9 39.785 241.93 40.015 241.96 40.255 cv
242.24 42.585 242.03 45.105 240.94 47.625 cv
cp
.0980392 .0980392 .0980392 rgb
f
229.46 43.105 mo
228.76 43.165 228.05 43.095 227.34 42.915 cv
222.81 41.755 218.25 36.065 215.91 32.735 cv
216 32.555 216.1 32.385 216.21 32.215 cv
216.24 32.165 li
218.83 35.865 224.49 43.005 229.4 42.515 cv
229.46 43.105 li
cp
.0392157 .0392157 .0392157 rgb
f
230.55 40.575 mo
230.45 41.145 li
230.33 41.125 230.22 41.105 230.11 41.075 cv
225.46 39.895 222.22 32.685 220.62 28.195 cv
220.8 28.085 220.97 27.985 221.15 27.885 cv
222.71 32.255 225.88 39.395 230.25 40.515 cv
230.35 40.535 230.45 40.555 230.55 40.575 cv
cp
f
235.8 37.415 mo
235.68 37.985 li
235.5 37.945 li
231.34 36.885 228.43 30.935 226.79 26.415 cv
227 26.415 227.22 26.415 227.43 26.425 cv
229.07 30.875 231.9 36.575 235.8 37.415 cv
cp
f
238.23 36.045 mo
238.07 36.165 237.91 36.285 237.75 36.405 cv
236.11 33.985 234.98 30.745 234.25 27.935 cv
234.44 28.025 234.62 28.115 234.8 28.205 cv
234.99 28.315 li
235.7 30.945 236.76 33.865 238.23 36.045 cv
cp
f
226.98 48.485 mo
226.29 48.555 225.58 48.485 224.88 48.295 cv
221.09 47.335 217.29 43.195 214.76 39.895 cv
214.7 39.555 214.66 39.205 214.64 38.855 cv
214.63 38.725 li
217.49 42.615 222.52 48.335 226.93 47.905 cv
226.98 48.485 li
cp
f
235.144 64.7352 mo
233.49 65.3684 229.542 64.9436 226.591 63.1475 cv
222.426 60.6121 218.743 54.8335 220.248 45.9542 cv
221.753 37.0749 227.717 30.6897 233.581 31.6776 cv
237.767 32.3975 240.653 36.6868 241.484 42.3327 cv
241.541 42.7373 241.595 43.15 241.639 43.5676 cv
241.645 43.7192 241.659 43.8741 241.671 44.037 cv
241.699 44.4209 241.719 44.8016 241.725 45.1954 cv
241.756 46.6059 241.579 48.053 241.454 49.5469 cv
240.341 62.87 238.806 63.3326 235.144 64.7352 cv
cp
.988235 .839216 .694118 rgb
f
232.976 55.9551 mo
233.17 55.8955 li
234.854 53.996 li
234.839 53.7229 li
234.809 53.6956 231.843 50.9665 232.52 48.7647 cv
232.552 48.6621 232.494 48.5527 232.391 48.5215 cv
232.272 48.4763 232.179 48.5474 232.147 48.65 cv
231.48 50.8203 233.822 53.2804 234.437 53.8788 cv
232.878 55.6373 li
232.895 55.9122 li
232.976 55.9551 li
cp
.756863 .588235 .419608 rgb
f
223.298 44.5092 mo
223.307 44.0251 226.98 42.2065 228.941 42.6578 cv
230.902 43.1092 231.046 44.5473 230.616 44.3612 cv
230.185 44.175 228.151 43.8288 227.09 44.0508 cv
226.03 44.2727 223.293 44.8283 223.298 44.5092 cv
cp
.176471 .176471 .176471 rgb
f
241.675 44.0981 mo
241.093 44.0121 240.546 43.8802 240.181 43.813 cv
239.112 43.6127 237.387 43.8761 236.96 44.0647 cv
236.529 44.2612 236.348 42.9507 238.309 42.4621 cv
239.186 42.2431 240.481 42.4987 241.586 42.8713 cv
241.643 43.2758 241.675 43.6824 241.675 44.0981 cv
cp
f
235.665 57.694 mo
235.081 58.1347 233.608 58.8666 230.834 58.0931 cv
230.565 58.018 230.327 58.2909 230.441 58.5458 cv
230.754 59.2418 231.491 60.2892 233.142 60.5372 cv
235.443 60.883 235.876 58.7926 235.954 57.8539 cv
235.968 57.6961 235.792 57.5986 235.665 57.694 cv
cp
1 1 1 rgb
f
225.615 47.8077 mo
228.86 47.3297 li
228.945 48.1272 li
225.387 48.3788 li
225.615 47.8077 li
cp
.176471 .176471 .176471 rgb
f
228.206 48.9493 mo
228.294 49.7056 228.001 50.3607 227.552 50.4126 cv
227.104 50.4646 226.669 49.8936 226.581 49.1373 cv
226.494 48.381 226.787 47.7259 227.235 47.6739 cv
227.684 47.622 228.119 48.193 228.206 48.9493 cv
cp
f
236.239 47.0372 mo
239.508 47.3002 li
239.412 48.0965 li
235.888 47.5424 li
236.239 47.0372 li
cp
f
238.306 48.7078 mo
238.216 49.4638 237.78 50.0333 237.331 49.98 cv
236.883 49.9265 236.592 49.2704 236.682 48.5144 cv
236.772 47.7584 237.209 47.1889 237.657 47.2423 cv
238.106 47.2957 238.396 47.9519 238.306 48.7078 cv
cp
f
252.147 140.264 mo
252.147 140.264 257.609 102.469 260.55 87.86 cv
261.221 84.5256 259.547 81.1681 256.483 79.6902 cv
243.326 73.6631 li
222.351 74.5698 li
211.965 84.2231 li
216.275 143.191 li
252.147 140.264 li
cp
.458824 .686275 .737255 rgb
f
224.328 75.7817 mo
232.484 75.6337 li
241.293 75.4701 li
246.115 75.3845 li
246.115 75.3845 244.479 74.3875 242.913 73.1646 cv
242.843 73.1101 li
239.027 70.3215 li
232.088 73.7773 li
226.762 71.7742 li
224.328 75.7817 li
cp
f
230.57 140.498 mo
231.339 140.38 li
229.616 129.165 231.495 75.0225 231.547 74.6939 cv
231.169 74.6297 li
231.562 74.5859 li
231.321 74.249 li
230.929 74.301 li
230.899 74.325 230.867 74.4486 230.835 74.6638 cv
230.788 74.6719 li
230.835 74.6665 li
230.11 79.5651 229.197 131.567 230.57 140.498 cv
cp
.254902 .419608 .447059 rgb
f
235.409 141.143 mo
236.179 141.024 li
234.45 129.773 235.597 75.6558 235.642 75.3279 cv
235.262 75.2735 li
235.655 75.2298 li
235.414 74.8928 li
235.023 74.945 li
234.994 74.9674 234.965 75.0902 234.937 75.3062 cv
234.88 75.3157 li
234.937 75.3093 li
234.311 80.192 234.025 132.135 235.409 141.143 cv
cp
f
261.92 88.385 mo
256.27 127.845 li
256.5 132.925 li
256.51 133.005 li
256.54 133.705 li
256.54 133.785 li
256.64 136.025 li
256.65 136.105 li
256.68 136.805 li
256.68 136.875 li
256.99 143.785 li
257.03 144.635 li
257.03 144.725 li
257.06 145.435 li
257.95 165.315 li
240.88 165.075 li
241.56 141.135 li
243.41 75.435 li
243.41 75.245 li
243.46 73.725 li
243.46 73.575 li
243.48 73.585 li
243.87 73.675 251.34 75.445 258.36 77.325 cv
258.7 77.415 259.03 77.505 259.37 77.605 cv
264.17 78.895 284.372 79.631 284.372 79.631 cv
284.372 79.631 262.15 86.505 261.92 88.385 cv
cp
.909804 .976471 .976471 rgb
f
211.62 132.935 mo
211.97 128.365 li
208.56 98.585 li
208.49 97.985 li
208.45 97.685 li
206.27 83.075 li
206.73 82.835 li
207.65 82.365 li
218.76 76.645 li
218.77 76.645 li
222.35 74.565 li
226.29 164.645 li
209.27 164.375 li
210.69 145.475 li
210.74 144.695 li
211.34 136.795 li
211.4 136.015 li
211.57 133.705 li
211.62 132.935 li
cp
f
222.351 74.5698 mo
226.958 80.2917 li
232.289 76.1322 li
232.686 75.7895 li
233.068 76.0855 li
238.643 80.085 li
242.913 73.1646 li
242.843 73.1101 li
241.613 72.2065 li
240.982 71.7469 li
239.027 70.3215 li
239.027 70.3215 235.646 71.4899 233.512 71.5677 cv
233.333 71.5756 233.161 71.5756 232.99 71.5834 cv
232.725 71.5912 232.468 71.5912 232.211 71.5912 cv
228.106 71.599 225.602 70.7779 225.602 70.7779 cv
222.351 74.5698 li
cp
1 .992157 .996078 rgb
f
232.211 71.5912 mo
232.289 76.1322 li
232.686 75.7895 li
233.068 76.0855 li
232.99 71.5834 li
232.725 71.5912 232.468 71.5912 232.211 71.5912 cv
cp
.254902 .419608 .447059 rgb
f
216.78 115.285 mo
215.78 115.385 li
214.02 96.205 209.69 87.015 206.73 82.835 cv
207.65 82.365 li
210.73 86.755 215.02 96.115 216.78 115.285 cv
cp
.764706 .858824 .854902 rgb
f
259.37 77.605 mo
258.88 78.445 258.36 79.425 257.85 80.545 cv
255.37 85.855 252.75 94.495 251.48 108.365 cv
250.48 108.265 li
251.78 94.155 254.44 85.365 256.98 79.955 cv
257.45 78.965 257.91 78.095 258.36 77.325 cv
258.7 77.415 259.03 77.505 259.37 77.605 cv
cp
f
239.664 50.6983 mo
239.664 51.0591 239.37 51.3526 239.009 51.3526 cv
235.158 51.3526 li
234.797 51.3526 234.503 51.0591 234.503 50.6983 cv
234.503 49.6773 li
234.503 49.3165 234.797 49.0225 235.158 49.0225 cv
239.009 49.0225 li
239.37 49.0225 239.664 49.3165 239.664 49.6773 cv
239.664 50.6983 li
cp
230.685 50.6983 mo
230.685 51.0591 230.391 51.3526 230.03 51.3526 cv
226.178 51.3526 li
225.817 51.3526 225.523 51.0591 225.523 50.6983 cv
225.523 49.6773 li
225.523 49.3165 225.817 49.0225 226.178 49.0225 cv
230.03 49.0225 li
230.391 49.0225 230.685 49.3165 230.685 49.6773 cv
230.685 50.6983 li
cp
239.009 48.5225 mo
235.158 48.5225 li
234.521 48.5225 234.003 49.0406 234.003 49.6773 cv
234.003 49.8662 li
232.898 49.1494 231.754 49.4995 231.276 49.709 cv
231.185 49.7542 li
231.185 49.6773 li
231.185 49.0406 230.667 48.5225 230.03 48.5225 cv
226.178 48.5225 li
225.542 48.5225 225.023 49.0406 225.023 49.6773 cv
225.023 50.6983 li
225.023 51.335 225.542 51.8526 226.178 51.8526 cv
230.03 51.8526 li
230.667 51.8526 231.185 51.335 231.185 50.6983 cv
231.185 50.3174 li
231.513 50.1249 232.829 49.4849 234.003 50.4984 cv
234.003 50.6983 li
234.003 51.335 234.521 51.8526 235.158 51.8526 cv
239.009 51.8526 li
239.646 51.8526 240.164 51.335 240.164 50.6983 cv
240.164 49.6773 li
240.164 49.0406 239.646 48.5225 239.009 48.5225 cv
cp
.552941 .678431 .698039 rgb
f
222.351 74.5698 mo
213.633 79.2845 li
219.53 92.5496 li
216.704 95.2867 li
219.497 104.064 li
223.48 100.401 li
222.351 74.5698 li
cp
.764706 .858824 .854902 rgb
f
243.478 73.6337 mo
250.973 75.4272 li
248.622 88.9703 li
251.5 93.422 li
246.896 102.546 li
242.35 99.4653 li
243.478 73.6337 li
cp
f
225.273 50.085 mo
225.209 50.0762 li
217.839 48.0953 li
217.706 48.0596 217.627 47.9224 217.663 47.7891 cv
217.698 47.6563 217.836 47.5782 217.969 47.6129 cv
225.338 49.5938 li
225.472 49.6295 225.551 49.7667 225.515 49.9 cv
225.485 50.0113 225.384 50.085 225.273 50.085 cv
cp
.552941 .678431 .698039 rgb
f
239.914 50.1172 mo
239.765 50.0679 li
239.654 49.9859 239.631 49.8297 239.713 49.7183 cv
241.625 47.1373 li
241.708 47.0269 241.865 47.0045 241.975 47.0855 cv
242.085 47.1675 242.109 47.3238 242.026 47.4351 cv
240.115 50.0162 li
239.914 50.1172 li
cp
f
220.438 49.9154 mo
220.438 49.9154 216.621 45.2119 215.282 47.4382 cv
213.944 49.6644 221.705 58.4624 224.295 58.5674 cv
226.591 58.6605 220.438 49.9154 220.438 49.9154 cv
cp
.988235 .839216 .694118 rgb
f
216.535 49.9923 mo
216.641 49.9893 li
216.744 49.9565 216.801 49.8471 216.768 49.7445 cv
216.605 49.232 216.595 48.8698 216.739 48.7511 cv
216.943 48.5803 217.507 48.7959 217.75 48.9271 cv
217.844 48.9783 217.963 48.9438 218.014 48.8492 cv
218.065 48.7548 218.03 48.6364 217.936 48.5852 cv
217.837 48.5314 216.952 48.0687 216.491 48.4509 cv
216.202 48.6893 216.171 49.1513 216.397 49.8627 cv
216.535 49.9923 li
cp
.756863 .588235 .419608 rgb
f
232.088 84.6137 mo
232.088 85.0891 232.474 85.4746 232.949 85.4746 cv
233.425 85.4746 233.81 85.0891 233.81 84.6137 cv
233.81 84.1381 233.425 83.7527 232.949 83.7527 cv
232.474 83.7527 232.088 84.1381 232.088 84.6137 cv
cp
.254902 .419608 .447059 rgb
f
362.31 242.585 mo
321.31 269.085 li
248.18 90.445 li
248.18 90.445 250.49 89.115 255.87 87.695 cv
258.55 86.995 261.99 86.265 266.28 85.685 cv
268.43 85.375 270.79 85.115 273.38 84.915 cv
276.58 84.645 280.12 84.465 284.03 84.415 cv
286.2 84.375 288.5 84.375 290.92 84.425 cv
292.65 84.455 294.45 84.505 296.31 84.585 cv
298.37 84.675 300.39 84.835 302.36 85.075 cv
348.94 90.485 371.81 133.585 371.81 133.585 cv
399.81 189.085 362.31 242.585 362.31 242.585 cv
cp
.168627 .168627 .168627 rgb
f
294.81 101.46 mo
300.579 91.5696 li
313.385 95.7538 li
310.482 105.265 li
318.759 108.871 li
325.413 101.26 li
335.701 108.622 li
330.353 116.77 li
335.413 121.929 li
340.53 117.106 li
349.155 127.402 li
337.06 139.314 li
307.916 130.409 li
294.81 101.46 li
cp
.792157 .976471 .909804 rgb
f
302.36 85.075 mo
296.56 108.015 li
273.28 106.775 li
257.76 93.705 li
255.87 87.695 li
258.55 86.995 261.99 86.265 266.28 85.685 cv
268.977 95.585 li
273.477 93.4184 li
273.38 84.915 li
276.58 84.645 280.12 84.465 284.03 84.415 cv
283.643 97.0017 li
286.893 101.502 li
290.92 84.425 li
292.65 84.455 294.45 84.505 296.31 84.585 cv
298.37 84.675 300.39 84.835 302.36 85.075 cv
cp
.380392 .396078 .576471 rgb
f
294.81 78.585 mo
301.185 78.96 306.852 86.21 300.935 85.3767 cv
295.139 84.5604 284.372 84.3807 284.372 84.3807 cv
284.372 84.3807 287.427 78.1507 294.81 78.585 cv
cp
.988235 .839216 .694118 rgb
f
384.828 175.82 mo
382.578 177.987 378.18 183.085 378.18 183.085 cv
397.986 209.532 li
405.176 215.036 415.605 212.584 419.588 204.452 cv
432.562 177.97 li
413.235 173.809 li
407.822 193.303 li
384.828 175.82 li
.929412 .929412 .929412 rgb
f
349.365 140.561 mo
357.365 132.212 li
365.365 141.418 li
373.929 138.734 li
374.387 127.003 li
386.937 128.26 li
385.598 140.228 li
391.898 143.841 li
400.889 136.584 li
408.005 145.176 li
400.035 153.728 li
401.149 159.631 li
411.252 163.373 li
406.388 175.083 li
397.81 170.21 li
395.227 174.502 li
396.06 176.002 400.477 183.252 400.477 183.252 cv
391.154 189.023 li
386.595 179.146 li
382.193 180.411 li
382.193 189.946 li
371.084 189.644 li
371.229 179.944 li
365.699 178.752 li
359.975 185.965 li
351.374 178.474 li
358.365 170.575 li
356.971 167.205 li
348.18 168.816 li
344.813 152.918 li
357.175 151.043 li
355.865 148.918 li
349.365 140.561 li
cp
.792157 .976471 .909804 rgb
f
378.01 144.846 mo
369.747 144.846 363.023 151.569 363.023 159.833 cv
363.023 168.097 369.747 174.82 378.01 174.82 cv
386.274 174.82 392.998 168.097 392.998 159.833 cv
392.998 151.569 386.274 144.846 378.01 144.846 cv
cp
378.01 175.82 mo
369.195 175.82 362.023 168.648 362.023 159.833 cv
362.023 151.018 369.195 143.846 378.01 143.846 cv
386.826 143.846 393.998 151.018 393.998 159.833 cv
393.998 168.648 386.826 175.82 378.01 175.82 cv
cp
1 1 1 rgb
f
384.828 159.833 mo
384.828 163.598 381.776 166.651 378.011 166.651 cv
374.245 166.651 371.193 163.598 371.193 159.833 cv
371.193 156.068 374.245 153.015 378.011 153.015 cv
381.776 153.015 384.828 156.068 384.828 159.833 cv
cp
.168627 .168627 .168627 rgb
f
404.753 311.156 mo
410.925 213.69 li
410.925 213.69 410.671 193.725 412.051 179.24 cv
412.843 170.932 417.984 163.673 425.558 160.166 cv
425.614 162.032 li
428.897 228.192 li
432.81 311.342 li
404.753 311.156 li
1 1 1 rgb
f
231.863 97.4043 mo
231.863 97.8798 232.249 98.2653 232.724 98.2653 cv
233.2 98.2653 233.585 97.8798 233.585 97.4043 cv
233.585 96.9288 233.2 96.5434 232.724 96.5434 cv
232.249 96.5434 231.863 96.9288 231.863 97.4043 cv
cp
.337255 .337255 .337255 rgb
f
231.863 113.113 mo
231.863 113.589 232.249 113.974 232.724 113.974 cv
233.2 113.974 233.585 113.589 233.585 113.113 cv
233.585 112.638 233.2 112.252 232.724 112.252 cv
232.249 112.252 231.863 112.638 231.863 113.113 cv
cp
f
112.995 276.946 mo
143.87 280.282 li
143.37 332.89 li
108.242 332.43 li
108.948 293.197 li
112.995 276.946 li
.917647 .917647 .917647 rgb
f
331.269 404.298 mo
308.849 383.587 305.136 356.382 305.97 337.206 cv
306.855 317.085 312.731 301.409 313.409 299.66 cv
313.579 299.202 li
311.72 298.482 li
311.537 298.952 li
310.858 300.7 304.873 316.621 303.971 337.093 cv
303.11 356.523 306.834 384.136 329.468 405.351 cv
329.67 405.54 li
329.938 405.469 li
330.323 405.367 330.698 405.256 331.073 405.145 cv
331.914 404.894 li
331.269 404.298 li
cp
.552941 .678431 .698039 rgb
f
259.89 410.185 mo
259.21 410.155 258.54 410.125 257.87 410.095 cv
270.07 349.775 248.11 342.345 247.89 342.275 cv
247.36 342.115 247.06 341.555 247.22 341.035 cv
247.38 340.505 247.93 340.205 248.46 340.355 cv
249.44 340.645 272.36 348.095 259.89 410.185 cv
cp
f
351.581 154.505 mo
356.971 167.205 li
353.521 167.955 li
352.531 168.175 li
338.061 171.335 li
322.311 142.135 li
331.311 134.975 li
328.681 130.865 li
328.041 129.875 li
325.603 127.835 li
343.651 127.835 li
343.001 137.435 li
347.251 140.075 li
356.571 136.675 li
362.061 149.915 li
351.581 154.505 li
cp
.380392 .396078 .576471 rgb
f
354.281 141.155 mo
346.161 143.975 li
345.991 144.035 345.811 144.005 345.671 143.895 cv
339.211 138.525 li
339.091 138.425 339.021 138.275 339.031 138.125 cv
339.371 130.675 li
328.681 130.865 li
326.571 130.905 li
326.291 130.895 326.061 130.695 326.061 130.415 cv
326.061 130.145 326.271 129.915 326.551 129.905 cv
328.041 129.875 li
339.881 129.665 li
340.011 129.655 340.161 129.725 340.251 129.815 cv
340.351 129.915 340.401 130.055 340.391 130.195 cv
340.041 137.915 li
346.101 142.945 li
354.401 140.055 li
354.641 139.965 354.921 140.085 355.021 140.335 cv
358.321 148.435 li
358.371 148.555 358.371 148.695 358.311 148.825 cv
358.261 148.945 358.161 149.045 358.031 149.095 cv
347.591 152.995 li
353.521 167.955 li
352.531 168.175 li
346.471 152.895 li
346.421 152.765 346.421 152.625 346.481 152.505 cv
346.531 152.385 346.631 152.285 346.761 152.245 cv
357.201 148.335 li
354.281 141.155 li
cp
.631373 .658824 .839216 rgb
f
344.287 149.388 mo
344.287 152.811 341.513 155.585 338.09 155.585 cv
334.668 155.585 331.893 152.811 331.893 149.388 cv
331.893 145.965 334.668 143.191 338.09 143.191 cv
341.513 143.191 344.287 145.965 344.287 149.388 cv
cp
.168627 .168627 .168627 rgb
f
104.953 407.787 mo
104.953 407.787 112.806 409.949 118.719 411.068 cv
120.101 411.33 121.106 412.527 121.106 413.933 cv
121.106 413.945 li
106.557 414.111 li
103.691 414.111 99.512 413.933 96.8712 412.629 cv
96.9484 413.945 li
92.0074 413.945 li
92.0994 409.627 li
92.136 407.908 93.5397 406.534 95.2587 406.534 cv
104.953 407.787 li
.0470588 .0470588 .0470588 rgb
f
98.9361 268.649 mo
100.449 338.453 li
100.449 338.453 91.8942 399.729 91.4419 408.261 cv
111.618 409.486 li
120.443 340.091 li
121.672 275.813 li
98.9361 268.649 li
.380392 .396078 .576471 rgb
f
97.0561 408.636 mo
96.6636 408.578 li
97.061 408.602 li
97.0561 408.636 li
.0352941 .0352941 .0352941 rgb
f
97.061 408.602 mo
96.6636 408.578 li
96.2671 408.52 li
106.47 339.01 li
106.158 280.425 li
106.955 280.42 li
107.263 339.065 li
97.061 408.602 li
.290196 .301961 .439216 rgb
f
148.012 409.22 mo
148.012 409.22 152.048 410.252 156.937 411.09 cv
158.327 411.329 159.347 412.534 159.347 413.945 cv
144.797 414.111 li
141.932 414.111 137.752 413.933 135.111 412.629 cv
135.189 413.945 li
130.248 413.945 li
130.34 409.627 li
130.376 407.908 131.78 406.534 133.499 406.534 cv
148.012 409.22 li
.0470588 .0470588 .0470588 rgb
f
144.269 262.649 mo
150.154 336.397 li
150.154 336.397 148.994 400.224 149.319 409.654 cv
128.978 410.322 li
130.248 340.435 li
122.782 276.308 li
144.269 262.649 li
.301961 .321569 .466667 rgb
f
135.648 410.156 mo
134.85 410.133 li
134.851 410.129 li
135.649 410.103 li
135.648 410.156 li
.0352941 .0352941 .0352941 rgb
f
134.851 410.129 mo
136.977 339.056 li
130.4 277.865 li
131.193 277.779 li
137.772 339.024 li
135.649 410.103 li
134.851 410.129 li
.231373 .243137 .356863 rgb
f
144.959 265.664 mo
144.616 274.616 134.287 281.487 121.89 281.011 cv
109.493 280.535 99.7214 272.893 100.065 263.941 cv
100.409 254.989 110.737 248.118 123.134 248.594 cv
135.531 249.07 145.303 256.712 144.959 265.664 cv
cp
.380392 .396078 .576471 rgb
f
106.557 259.572 mo
106.557 259.572 103.638 233.266 100.29 215.355 cv
98.4855 205.701 102.175 196.131 111.106 192.045 cv
112.816 191.262 li
135.55 191.455 li
148.8 200.656 li
144.269 262.649 li
106.557 259.572 li
cp
.458824 .686275 .737255 rgb
f
117.645 258.806 mo
138.57 258.806 li
138.553 268.298 li
117.645 268.298 li
117.645 258.806 li
cp
.2 .188235 .2 rgb
f
120.777 169.959 mo
120.777 169.959 123.448 187.37 113.689 191.71 cv
134.928 192.039 li
134.928 192.039 129.329 183.633 133.757 175.461 cv
133.757 175.461 123.849 168.112 120.777 169.959 cv
cp
.988235 .839216 .694118 rgb
f
132.556 178.342 mo
132.556 178.342 124.877 172.595 126.676 175.742 cv
128.915 179.66 132.088 181.23 132.088 181.23 cv
132.556 178.342 li
cp
.756863 .588235 .419608 rgb
f
150.15 201.584 mo
150.252 201.877 150.047 202.82 150.047 202.82 cv
146.307 247.492 li
146.41 249.231 li
146.458 250.028 li
146.921 257.843 li
146.969 258.712 li
151.372 333.029 li
138.435 333.029 li
138.435 333.029 138.185 210.166 135.55 191.455 cv
135.425 190.566 148.8 197.71 150.15 201.584 cv
cp
.929412 .929412 .929412 rgb
f
136.977 159.32 mo
136.714 166.114 130.996 171.409 124.202 171.146 cv
120.183 170.995 116.491 169.862 114.362 166.8 cv
113.779 165.963 112.304 164.495 110.901 162.462 cv
108.676 159.24 107.982 155.229 109.689 151.705 cv
109.792 151.489 li
109.96 151.154 110.127 150.82 110.319 150.485 cv
110.996 149.241 111.802 148.045 112.727 147.064 cv
112.759 147.032 li
112.864 146.932 li
113.071 146.722 113.281 146.515 113.5 146.33 cv
113.764 146.107 114.035 145.899 114.314 145.716 cv
114.409 145.66 li
114.449 145.628 li
114.76 145.437 115.079 145.277 115.414 145.142 cv
116.427 144.735 117.36 144.408 118.221 144.137 cv
118.46 144.057 118.684 143.986 118.907 143.922 cv
121.116 143.268 122.79 143.037 124.042 143.013 cv
124.274 143.005 124.481 143.005 124.68 143.013 cv
126.841 143.1 127.511 143.85 127.511 143.85 cv
127.511 143.85 128.038 144.32 128.843 145.126 cv
129.05 145.333 129.266 145.556 129.505 145.804 cv
130.741 147.088 132.368 148.922 133.779 150.971 cv
135.597 153.603 137.08 156.609 136.977 159.32 cv
cp
.0980392 .0980392 .0980392 rgb
f
118.476 168.953 mo
117.998 169.312 li
117.623 168.818 110.749 159.623 109.792 151.489 cv
109.96 151.154 110.127 150.82 110.319 150.485 cv
110.829 158.73 118.381 168.826 118.476 168.953 cv
cp
.0392157 .0392157 .0392157 rgb
f
138.508 176.066 mo
137.391 177.55 134.919 179.097 131.443 178.315 cv
126.786 177.262 119.688 173.427 117.918 164.783 cv
117.751 163.961 117.623 163.156 117.551 162.35 cv
117.495 161.864 117.464 161.378 117.448 160.899 cv
117.176 153.874 120.199 148.013 125.039 147.016 cv
129.122 146.187 133.277 149.081 136.036 153.946 cv
136.227 154.296 136.426 154.655 136.61 155.022 cv
136.674 155.158 136.746 155.293 136.809 155.437 cv
136.969 155.78 137.128 156.115 137.272 156.473 cv
137.798 157.749 138.229 159.113 138.564 160.548 cv
140.972 171.05 139.768 174.384 138.508 176.066 cv
cp
.988235 .839216 .694118 rgb
f
119.32 167.621 mo
119.32 167.621 114.367 164.35 113.772 166.825 cv
113.178 169.3 122.025 175.936 123.613 174.339 cv
125.201 172.742 119.32 167.621 119.32 167.621 cv
cp
f
133.986 150.995 mo
133.986 150.995 133.915 150.987 133.779 150.971 cv
133.269 150.923 131.913 150.812 130.167 150.867 cv
129.951 150.867 129.72 150.883 129.497 150.891 cv
128.077 150.963 126.467 151.154 124.872 151.553 cv
124.664 151.601 124.457 151.657 124.25 151.721 cv
122.711 152.167 121.219 152.829 119.983 153.81 cv
119.8 153.946 119.625 154.097 119.457 154.264 cv
118.652 154.99 117.99 155.891 117.527 156.968 cv
116.834 158.587 115.047 154.025 113.859 150.564 cv
113.596 149.799 113.365 149.089 113.181 148.515 cv
112.902 147.638 112.727 147.064 112.727 147.064 cv
112.759 147.032 li
112.838 146.952 113.102 146.713 113.492 146.378 cv
113.716 146.194 113.995 145.971 114.314 145.732 cv
114.409 145.66 li
114.449 145.628 li
115.279 145.022 116.339 144.328 117.527 143.794 cv
117.83 143.659 118.125 143.531 118.42 143.411 cv
118.668 143.308 118.915 143.204 119.154 143.116 cv
121.044 142.383 122.751 141.936 124.409 141.697 cv
124.64 141.657 124.872 141.625 125.103 141.601 cv
126.514 141.434 127.894 141.41 129.313 141.474 cv
129.529 141.482 129.752 141.49 129.967 141.506 cv
130.629 141.545 131.307 141.601 131.993 141.665 cv
133.261 141.785 134.289 141.968 134.664 142.215 cv
137.064 143.85 133.986 150.995 133.986 150.995 cv
cp
.0980392 .0980392 .0980392 rgb
f
134.722 167.948 mo
134.653 167.935 li
134.549 167.897 134.497 167.782 134.535 167.679 cv
135.333 165.528 li
134.547 165.193 131.549 163.775 131.391 161.559 cv
131.383 161.449 131.466 161.353 131.575 161.345 cv
131.684 161.339 131.781 161.42 131.789 161.53 cv
131.95 163.778 135.622 165.216 135.659 165.23 cv
135.761 165.27 135.812 165.384 135.774 165.486 cv
134.909 167.818 li
134.722 167.948 li
cp
.756863 .588235 .419608 rgb
f
120.193 162.379 mo
120.029 161.934 122.741 158.97 124.692 158.688 cv
126.643 158.405 127.284 159.668 126.825 159.65 cv
126.366 159.633 124.385 160.037 123.494 160.616 cv
122.604 161.195 120.301 162.672 120.193 162.379 cv
cp
.176471 .176471 .176471 rgb
f
136.614 155.019 mo
136.052 155.147 135.507 155.24 135.149 155.308 cv
134.101 155.504 132.619 156.356 132.295 156.68 cv
131.972 157.012 131.341 155.879 132.96 154.738 cv
133.684 154.227 134.893 153.997 136.035 153.946 cv
136.231 154.295 136.426 154.653 136.614 155.019 cv
cp
f
136.501 168.752 mo
135.979 169.477 134.926 170.383 132.847 170.656 cv
132.475 170.705 132.323 171.152 132.587 171.418 cv
133.17 172.007 134.071 172.609 135.575 172.271 cv
137.432 171.854 137.552 170.13 137.307 168.907 cv
137.23 168.52 136.731 168.432 136.501 168.752 cv
cp
1 1 1 rgb
f
123.291 164.836 mo
125.896 162.955 li
126.331 163.61 li
123.35 165.436 li
123.291 164.836 li
cp
.176471 .176471 .176471 rgb
f
126.55 164.408 mo
126.898 165.067 126.863 165.77 126.471 165.976 cv
126.08 166.183 125.48 165.815 125.132 165.155 cv
124.785 164.495 124.82 163.793 125.211 163.587 cv
125.603 163.38 126.202 163.748 126.55 164.408 cv
cp
f
133.552 159.871 mo
136.158 157.99 li
136.592 158.645 li
133.612 160.471 li
133.552 159.871 li
cp
f
136.73 159.719 mo
137.078 160.379 137.042 161.081 136.651 161.288 cv
136.259 161.494 135.66 161.126 135.312 160.466 cv
134.964 159.807 134.999 159.104 135.391 158.898 cv
135.782 158.691 136.382 159.059 136.73 159.719 cv
cp
f
118.986 186.601 mo
127.673 187.904 li
132.352 187.252 li
135.612 191.535 li
111.841 192.103 li
111.841 192.103 118.208 188.633 118.986 186.601 cv
cp
.458824 .686275 .737255 rgb
f
135.55 191.455 mo
133.72 196.445 li
127.23 192.065 li
121.28 196.635 li
116.2 189.385 li
117.02 188.675 li
117.22 188.465 li
117.43 188.245 li
117.63 188.035 li
118.936 186.435 li
118.936 186.435 123.68 187.525 126.81 187.615 cv
129.27 187.675 132.678 186.798 132.678 186.798 cv
134.53 189.685 li
134.93 190.325 li
135.55 191.455 li
cp
1 1 1 rgb
f
94.2913 331.957 mo
101.06 242.987 li
98.8099 209.585 li
97.5676 199.085 106.454 193.273 112 190.804 cv
113.069 190.328 116.2 189.385 116.2 189.385 cv
115.749 191.329 li
118.582 237.308 li
119.622 254.186 119.622 271.112 118.583 287.99 cv
115.81 333.029 li
94.2913 331.957 li
cp
f
111.565 257.146 mo
110.579 258.027 109.308 258.475 107.989 258.399 cv
106.669 258.326 105.456 257.743 104.574 256.758 cv
103.692 255.772 103.247 254.502 103.321 253.182 cv
103.496 250.025 li
113.384 250.545 li
113.207 253.731 li
113.134 255.051 112.55 256.264 111.565 257.146 cv
cp
113.559 247.398 mo
113.428 249.749 li
103.54 249.228 li
103.673 246.848 li
113.559 247.398 li
cp
114.001 246.624 mo
103.319 246.03 li
103.216 246.028 103.109 246.06 103.031 246.131 cv
102.952 246.202 102.904 246.301 102.899 246.406 cv
102.525 253.138 li
102.44 254.67 102.956 256.145 103.98 257.289 cv
105.004 258.433 106.412 259.11 107.945 259.195 cv
108.054 259.201 108.163 259.204 108.272 259.204 cv
109.687 259.204 111.034 258.69 112.097 257.74 cv
113.241 256.716 113.918 255.308 114.003 253.775 cv
114.377 247.044 li
114.389 246.824 114.221 246.636 114.001 246.624 cv
cp
.458824 .686275 .737255 rgb
f
146.969 258.712 mo
146.291 259.031 145.541 259.207 144.744 259.207 cv
144.664 259.207 li
141.753 259.207 139.385 256.838 139.385 253.928 cv
139.385 246.719 li
139.385 246.496 139.568 246.32 139.784 246.32 cv
146.402 246.32 li
146.339 247.118 li
140.182 247.118 li
140.182 249.231 li
146.41 249.231 li
146.458 250.028 li
140.182 250.028 li
140.182 253.928 li
140.182 256.4 142.192 258.409 144.664 258.409 cv
144.744 258.409 li
145.533 258.409 146.275 258.202 146.921 257.843 cv
146.969 258.712 li
cp
f
116.132 169.332 mo
115.977 169.257 li
115.516 168.685 115.38 168.248 115.561 167.925 cv
115.85 167.407 116.827 167.517 116.937 167.531 cv
117.046 167.545 117.124 167.645 117.11 167.754 cv
117.096 167.863 116.998 167.938 116.887 167.926 cv
116.623 167.893 116.034 167.896 115.909 168.12 cv
115.821 168.276 115.959 168.6 116.287 169.007 cv
116.257 169.288 li
116.132 169.332 li
cp
.756863 .588235 .419608 rgb
f
117.551 162.35 mo
115.295 158.594 112.902 153.379 113.181 148.515 cv
113.221 147.789 113.325 147.08 113.492 146.378 cv
113.5 146.33 li
113.764 146.107 114.035 145.899 114.314 145.716 cv
114.314 145.732 li
113.819 147.271 113.708 148.906 113.859 150.564 cv
114.186 154.185 115.781 157.893 117.448 160.899 cv
117.464 161.378 117.495 161.864 117.551 162.35 cv
cp
.0392157 .0392157 .0392157 rgb
f
119.983 153.81 mo
119.8 153.946 119.625 154.097 119.457 154.264 cv
118.189 150.995 117.464 147.423 118.221 144.137 cv
118.277 143.89 118.341 143.651 118.42 143.411 cv
118.668 143.308 118.915 143.204 119.154 143.116 cv
119.058 143.38 118.979 143.651 118.907 143.922 cv
118.094 147.08 118.763 150.58 119.983 153.81 cv
cp
f
131.364 268.298 mo
125.483 268.298 li
125.483 258.806 li
131.364 258.806 li
131.364 268.298 li
cp
.807843 .8 .803922 rgb
f
343.81 224.585 mo
343.79 224.975 343.76 225.395 343.72 225.855 cv
342.51 239.105 330.99 282.035 321.81 295.085 cv
312.31 308.585 251.81 341.085 241.31 344.085 cv
237.22 345.255 230.74 347.045 223.6 347.755 cv
212.41 348.875 199.59 347.345 191.81 336.585 cv
190.91 335.345 189.82 333.445 188.61 331.035 cv
187.51 328.825 186.33 326.185 185.12 323.245 cv
184.84 322.565 184.56 321.855 184.28 321.135 cv
180.5 311.485 176.75 299.065 175.31 287.585 cv
174.02 277.285 173.39 255.795 172.38 221.405 cv
172.36 220.845 172.35 220.285 172.33 219.725 cv
172.3 218.585 172.26 217.435 172.23 216.265 cv
172.2 214.975 172.16 213.665 172.12 212.345 cv
172.02 209.185 171.92 205.935 171.81 202.585 cv
171.43 190.995 172.76 180.445 174.97 171.155 cv
175.14 170.435 175.32 169.725 175.5 169.025 cv
175.68 168.355 175.86 167.685 176.03 167.025 cv
176.09 166.835 176.14 166.635 176.19 166.445 cv
183.02 142.085 195.31 127.585 195.31 127.585 cv
224.31 86.085 262.31 89.085 262.31 89.085 cv
286.31 91.085 301.31 97.585 325.81 127.085 cv
350.31 156.585 344.31 213.085 343.81 224.585 cv
cp
1 1 1 rgb
f
192.31 252.765 mo
185.6 263.185 190.17 266.845 194.02 270.015 cv
195.48 271.215 201.092 271.762 198.926 271.949 cv
180.659 273.53 189.457 292.16 201.747 313.96 cv
202.187 314.73 202.695 316.475 202.685 317.585 cv
202.675 318.215 203.85 318.245 203.71 318.935 cv
193.16 318.715 186.04 322.445 185.92 322.505 cv
185.53 322.715 185.07 322.635 184.76 322.345 cv
184.66 322.095 184.56 321.835 184.46 321.575 cv
180.61 311.865 177.936 305.96 175.31 287.585 cv
173.841 277.309 173.39 255.795 172.38 221.405 cv
172.36 220.845 172.35 220.285 172.33 219.725 cv
172.3 218.585 172.26 217.435 172.23 216.265 cv
172.2 214.975 172.16 213.665 172.12 212.345 cv
172.02 209.185 171.92 205.935 171.81 202.585 cv
171.43 190.995 172.76 180.445 174.97 171.155 cv
175.14 170.435 175.32 169.725 175.5 169.025 cv
175.68 168.355 175.86 167.685 176.03 167.025 cv
178.08 166.715 179.64 166.765 179.64 166.765 cv
179.64 166.765 190.42 155.675 208.43 173.205 cv
217.81 182.335 214.43 208.055 210.18 217.645 cv
206.19 226.655 199.42 241.725 192.31 252.765 cv
cp
.85098 .901961 .909804 rgb
f
263.365 164.781 mo
263.365 167.297 261.325 169.336 258.81 169.336 cv
256.294 169.336 254.255 167.297 254.255 164.781 cv
254.255 162.266 256.294 160.227 258.81 160.227 cv
261.325 160.227 263.365 162.266 263.365 164.781 cv
cp
.552941 .678431 .698039 rgb
f
261.253 164.781 mo
261.253 166.131 260.159 167.225 258.81 167.225 cv
257.46 167.225 256.366 166.131 256.366 164.781 cv
256.366 163.432 257.46 162.338 258.81 162.338 cv
260.159 162.338 261.253 163.432 261.253 164.781 cv
cp
.286275 .286275 .286275 rgb
f
298.657 373.256 mo
298.657 375.222 297.064 376.815 295.098 376.815 cv
293.131 376.815 291.538 375.222 291.538 373.256 cv
291.538 371.29 293.131 369.696 295.098 369.696 cv
297.064 369.696 298.657 371.29 298.657 373.256 cv
cp
.552941 .678431 .698039 rgb
f
297.007 373.256 mo
297.007 374.31 296.152 375.165 295.098 375.165 cv
294.043 375.165 293.188 374.31 293.188 373.256 cv
293.188 372.201 294.043 371.346 295.098 371.346 cv
296.152 371.346 297.007 372.201 297.007 373.256 cv
cp
.286275 .286275 .286275 rgb
f
272.409 399.192 mo
272.409 401.158 270.816 402.752 268.85 402.752 cv
266.884 402.752 265.29 401.158 265.29 399.192 cv
265.29 397.226 266.884 395.632 268.85 395.632 cv
270.816 395.632 272.409 397.226 272.409 399.192 cv
cp
.552941 .678431 .698039 rgb
f
270.759 399.192 mo
270.759 400.247 269.904 401.102 268.85 401.102 cv
267.795 401.102 266.94 400.247 266.94 399.192 cv
266.94 398.137 267.795 397.282 268.85 397.282 cv
269.904 397.282 270.759 398.137 270.759 399.192 cv
cp
.286275 .286275 .286275 rgb
f
324.764 368.621 mo
324.764 370.587 323.17 372.181 321.204 372.181 cv
319.238 372.181 317.644 370.587 317.644 368.621 cv
317.644 366.655 319.238 365.061 321.204 365.061 cv
323.17 365.061 324.764 366.655 324.764 368.621 cv
cp
.552941 .678431 .698039 rgb
f
323.114 368.621 mo
323.114 369.676 322.259 370.531 321.204 370.531 cv
320.149 370.531 319.294 369.676 319.294 368.621 cv
319.294 367.567 320.149 366.712 321.204 366.712 cv
322.259 366.712 323.114 367.567 323.114 368.621 cv
cp
.286275 .286275 .286275 rgb
f
300.06 174.732 mo
300.06 176.403 298.705 177.758 297.034 177.758 cv
295.363 177.758 294.008 176.403 294.008 174.732 cv
294.008 173.061 295.363 171.706 297.034 171.706 cv
298.705 171.706 300.06 173.061 300.06 174.732 cv
cp
.552941 .678431 .698039 rgb
f
298.657 174.732 mo
298.657 175.629 297.93 176.355 297.034 176.355 cv
296.137 176.355 295.411 175.629 295.411 174.732 cv
295.411 173.836 296.137 173.109 297.034 173.109 cv
297.93 173.109 298.657 173.836 298.657 174.732 cv
cp
.286275 .286275 .286275 rgb
f
282.869 167.915 mo
282.869 169.781 281.357 171.293 279.491 171.293 cv
277.625 171.293 276.113 169.781 276.113 167.915 cv
276.113 166.049 277.625 164.537 279.491 164.537 cv
281.357 164.537 282.869 166.049 282.869 167.915 cv
cp
.552941 .678431 .698039 rgb
f
281.303 167.915 mo
281.303 168.916 280.492 169.727 279.491 169.727 cv
278.49 169.727 277.679 168.916 277.679 167.915 cv
277.679 166.914 278.49 166.103 279.491 166.103 cv
280.492 166.103 281.303 166.914 281.303 167.915 cv
cp
.286275 .286275 .286275 rgb
f
190.551 158.148 mo
190.551 160.014 189.039 161.526 187.173 161.526 cv
185.307 161.526 183.795 160.014 183.795 158.148 cv
183.795 156.282 185.307 154.77 187.173 154.77 cv
189.039 154.77 190.551 156.282 190.551 158.148 cv
cp
.552941 .678431 .698039 rgb
f
188.985 158.148 mo
188.985 159.149 188.174 159.961 187.173 159.961 cv
186.172 159.961 185.36 159.149 185.36 158.148 cv
185.36 157.147 186.172 156.336 187.173 156.336 cv
188.174 156.336 188.985 157.147 188.985 158.148 cv
cp
.286275 .286275 .286275 rgb
f
213.28 159.908 mo
213.28 162.424 211.241 164.463 208.725 164.463 cv
206.209 164.463 204.17 162.424 204.17 159.908 cv
204.17 157.392 206.209 155.353 208.725 155.353 cv
211.241 155.353 213.28 157.392 213.28 159.908 cv
cp
.552941 .678431 .698039 rgb
f
211.169 159.908 mo
211.169 161.258 210.075 162.352 208.725 162.352 cv
207.375 162.352 206.281 161.258 206.281 159.908 cv
206.281 158.558 207.375 157.464 208.725 157.464 cv
210.075 157.464 211.169 158.558 211.169 159.908 cv
cp
.286275 .286275 .286275 rgb
f
331.31 134.971 mo
331.31 134.971 313.81 143.263 308.81 166.174 cv
303.81 189.085 320.382 222.867 343.721 225.851 cv
343.721 225.851 348.512 199.315 348.082 192.71 cv
345.415 151.755 331.31 134.971 331.31 134.971 cv
cp
.247059 .247059 .247059 rgb
f
326.58 199.255 mo
337.31 208.085 li
326.73 217.645 li
326.73 217.645 320.45 212.905 314.64 201.465 cv
314.48 201.175 314.33 200.875 314.18 200.565 cv
313.57 199.315 312.96 197.985 312.37 196.585 cv
312.26 196.335 312.15 196.045 312.03 195.725 cv
311.47 194.215 310.81 192.115 310.34 190.795 cv
308.39 185.295 307.55 180.365 307.47 175.905 cv
307.47 175.725 li
307.45 174.285 307.51 172.895 307.63 171.555 cv
307.67 171.215 307.7 170.875 307.74 170.535 cv
308.72 162.355 312.14 155.875 315.27 150.265 cv
326.14 156.945 li
320.949 167.822 li
326.404 174.301 li
339.472 172.201 li
342.67 189.275 li
329.19 190.755 li
326.58 199.255 li
cp
.380392 .396078 .576471 rgb
f
309.25 170.465 mo
308.74 170.465 308.24 170.485 307.74 170.535 cv
307.7 170.875 307.67 171.215 307.63 171.555 cv
308.16 171.495 308.7 171.465 309.25 171.465 cv
317.5 171.465 324.22 178.175 324.22 186.435 cv
324.22 192.955 320.02 198.525 314.18 200.565 cv
314.33 200.875 314.48 201.175 314.64 201.465 cv
320.8 199.255 325.22 193.345 325.22 186.435 cv
325.22 177.625 318.06 170.465 309.25 170.465 cv
cp
.631373 .658824 .839216 rgb
f
380.641 195.985 mo
380.531 196.755 380.281 197.985 379.931 199.515 cv
379.861 199.855 379.781 200.215 379.691 200.585 cv
377.761 208.905 373.571 223.845 371.891 224.625 cv
371.421 224.835 358.141 229.095 351.941 231.075 cv
351.601 231.185 351.281 231.285 350.991 231.385 cv
349.641 231.815 348.811 232.075 348.811 232.075 cv
341.931 213.335 li
358.101 206.295 li
361.871 215.605 li
367.201 211.255 li
368.571 198.425 li
380.641 195.985 li
cp
.380392 .396078 .576471 rgb
f
379.931 199.515 mo
379.861 199.855 379.781 200.215 379.691 200.585 cv
372.541 201.885 li
371.761 214.535 li
371.751 214.655 371.701 214.765 371.611 214.855 cv
362.341 224.105 li
362.221 224.215 362.051 224.275 361.891 224.235 cv
361.721 224.205 361.581 224.095 361.521 223.935 cv
356.571 211.745 li
346.481 216.025 li
351.941 231.075 li
352.781 233.395 li
352.871 233.655 352.741 233.945 352.481 234.035 cv
352.311 234.065 li
352.111 234.065 351.911 233.945 351.841 233.735 cv
350.991 231.385 li
345.381 215.925 li
345.291 215.675 345.411 215.395 345.651 215.295 cv
356.651 210.625 li
356.771 210.575 356.911 210.575 357.041 210.625 cv
357.161 210.675 357.261 210.775 357.311 210.905 cv
362.161 222.865 li
370.771 214.285 li
371.561 201.435 li
371.571 201.205 371.741 201.015 371.971 200.975 cv
379.931 199.515 li
cp
.631373 .658824 .839216 rgb
f
339.31 227.576 mo
339.31 227.576 363.81 216.252 374.143 226.252 cv
384.477 236.252 380.143 250.918 371.477 261.252 cv
362.81 271.585 338.477 296.918 326.477 296.918 cv
314.477 296.918 314.993 293.894 317.326 286.228 cv
319.66 278.561 339.31 227.576 339.31 227.576 cv
cp
1 1 1 rgb
f
365.66 257.21 mo
365.52 257.21 365.375 257.18 365.239 257.117 cv
364.738 256.883 364.522 256.288 364.755 255.788 cv
368.856 246.986 369.517 240.828 366.72 237.487 cv
362.494 232.437 351.528 235.271 351.417 235.3 cv
350.883 235.439 350.336 235.123 350.195 234.589 cv
350.053 234.055 350.371 233.508 350.905 233.367 cv
351.405 233.234 363.221 230.19 368.254 236.203 cv
371.592 240.191 371.025 247.065 366.568 256.632 cv
366.399 256.996 366.037 257.21 365.66 257.21 cv
cp
.552941 .678431 .698039 rgb
f
340.27 281.725 mo
339.911 281.725 339.564 281.531 339.385 281.191 cv
339.127 280.703 339.314 280.099 339.802 279.841 cv
348.488 275.25 355.054 267.284 355.12 267.204 cv
355.467 266.776 356.098 266.713 356.527 267.063 cv
356.955 267.412 357.018 268.042 356.669 268.47 cv
356.391 268.809 349.777 276.831 340.736 281.608 cv
340.588 281.688 340.427 281.725 340.27 281.725 cv
cp
f
320.43 276.095 mo
320.44 276.365 320.35 276.625 320.18 276.815 cv
318 279.295 272.86 330.015 240.76 330.015 cv
236.03 330.015 231.59 328.915 227.61 326.405 cv
218.84 320.875 210.56 319.075 203.71 318.935 cv
193.16 318.715 186.04 322.445 185.92 322.505 cv
185.81 322.565 185.5 322.855 185.12 323.245 cv
184.84 322.565 184.56 321.855 184.28 321.135 cv
184.64 320.935 184.9 320.795 184.97 320.755 cv
185.09 320.685 192.7 316.675 203.93 316.955 cv
211.05 317.115 219.63 319.005 228.68 324.715 cv
257.27 342.765 314.02 280.675 318.41 275.795 cv
318.27 271.665 318.19 238.625 341.1 225.295 cv
341.81 225.465 343.23 225.685 343.72 225.855 cv
320.03 239.225 320.4 275.715 320.43 276.095 cv
cp
f
250.977 290.585 mo
254.06 289.085 229.521 287.222 223.747 283.898 cv
212.581 277.468 211.442 286.335 207.227 286.335 cv
204.06 286.335 204.541 281.395 200.497 280.085 cv
196.483 278.785 191.949 282.16 189.462 283.876 cv
188.704 284.399 188.957 285.576 189.862 285.747 cv
192.856 286.314 197.925 287.387 199.81 288.46 cv
200.424 288.81 206.062 296.96 215.685 291.46 cv
215.685 291.46 247.774 292.143 250.977 290.585 cv
cp
f
209.297 303.958 mo
205.444 303.604 202.917 301.904 201.105 300.684 cv
200.769 300.458 li
200.31 300.152 200.186 299.53 200.492 299.071 cv
200.798 298.612 201.419 298.488 201.879 298.795 cv
202.222 299.025 li
205.16 301.001 209.6 303.992 218.892 300.201 cv
219.404 299.994 219.987 300.238 220.196 300.75 cv
220.404 301.261 220.159 301.845 219.647 302.054 cv
215.394 303.788 212.015 304.208 209.297 303.958 cv
cp
f
319.43 185.855 mo
319.43 190.535 316.31 194.485 312.03 195.725 cv
311.47 194.215 310.81 192.115 310.34 190.795 cv
308.39 185.295 307.55 180.365 307.47 175.905 cv
307.47 175.725 li
308.02 175.635 308.59 175.585 309.16 175.585 cv
314.84 175.585 319.43 180.185 319.43 185.855 cv
cp
.247059 .247059 .247059 rgb
f
209.309 270.863 mo
209.531 270.826 214.518 267.521 219.435 267.125 cv
225.559 266.633 232.723 268.793 232.723 268.793 cv
232.723 268.793 222.435 264.467 220.81 263.634 cv
219.185 262.8 216.034 264.265 214.46 265.29 cv
212.886 266.315 209.309 270.863 209.309 270.863 cv
cp
.85098 .901961 .909804 rgb
f
236.62 268.555 mo
236.56 269.105 236.09 269.525 235.53 269.455 cv
228.03 268.735 226.63 267.875 224.52 266.575 cv
223.78 266.115 222.94 265.585 221.64 264.995 cv
217.82 263.235 215 265.835 212.45 268.645 cv
211.67 269.505 211.15 270.085 210.6 270.335 cv
207.83 271.575 204.86 272.205 202.01 272.205 cv
199.31 272.205 196.72 271.645 194.52 270.515 cv
191.56 268.995 189.62 266.595 189.04 263.755 cv
187.66 256.915 191.46 251.435 195.85 245.105 cv
198.87 240.755 202.28 235.835 204.62 229.625 cv
204.89 228.925 205.19 228.145 205.51 227.315 cv
210.33 214.765 220.37 188.655 208.69 175.495 cv
202.69 168.745 195.91 165.355 188.52 165.505 cv
183.9 165.585 179.47 167.025 175.5 169.025 cv
175.73 168.155 175.96 167.295 176.19 166.445 cv
179.97 164.745 184.12 163.585 188.48 163.505 cv
196.46 163.355 203.78 166.955 210.18 174.175 cv
222.68 188.245 212.34 215.115 207.38 228.035 cv
207.06 228.865 206.76 229.635 206.5 230.335 cv
204.07 236.765 200.57 241.805 197.49 246.245 cv
193.19 252.445 189.79 257.345 191 263.355 cv
191.46 265.585 193.03 267.495 195.43 268.735 cv
199.43 270.775 204.92 270.695 209.77 268.505 cv
209.97 268.405 210.53 267.795 210.97 267.305 cv
213.08 264.975 217 260.655 222.48 263.175 cv
223.88 263.825 224.78 264.375 225.58 264.875 cv
227.51 266.065 228.68 266.785 235.72 267.465 cv
236.27 267.515 236.67 268.005 236.62 268.555 cv
cp
f
135.65 191.394 mo
135.65 191.394 137.406 191.535 138.234 192.438 cv
140.189 194.571 145.185 202.835 145.185 202.835 cv
138.81 211.21 li
144.06 213.46 li
139.95 230.835 li
137.594 242.964 li
135.549 191.434 li
135.65 191.394 li
cp
.764706 .858824 .854902 rgb
f
116.917 205.252 mo
111.09 214.866 li
117.465 223.241 li
102.516 215.216 li
118.891 243.427 li
118.952 243.509 118.881 242.158 118.842 241.619 cv
116.917 205.252 li
cp
f
387.393 179.502 mo
388.56 187.835 398.121 192.06 400.296 191.107 cv
402.471 190.153 405.545 185.802 405.545 185.802 cv
405.545 185.802 399.125 179.722 398.185 179.134 cv
397.248 178.548 398.567 182.652 399.591 183.431 cv
400.616 184.21 386.369 172.188 387.393 179.502 cv
cp
.988235 .839216 .694118 rgb
f
126.529 187.604 mo
126.39 192.71 li
127.23 192.065 li
128.034 192.608 li
127.784 187.596 li
126.529 187.604 li
cp
.254902 .419608 .447059 rgb
f
341.745 416.552 mo
334.885 416.249 li
381.076 273.103 li
387.378 275.136 li
341.745 416.552 li
cp
.376471 .501961 .529412 rgb
f
346.705 384.628 mo
347.608 378.068 li
373.857 381.682 li
372.953 388.242 li
346.705 384.628 li
cp
f
355.143 358.673 mo
356.478 352.187 li
380.984 357.231 li
379.649 363.717 li
355.143 358.673 li
cp
f
362.955 334.517 mo
364.29 328.031 li
388.796 333.075 li
387.461 339.561 li
362.955 334.517 li
cp
f
369.969 310.409 mo
371.304 303.923 li
395.81 308.968 li
394.475 315.454 li
369.969 310.409 li
cp
f
368.069 413.515 mo
361.11 413.515 li
396.745 303.083 li
401.103 311.14 li
368.069 413.515 li
cp
f
443.333 414.632 mo
436.539 415.498 li
368.35 247.042 li
374.488 244.557 li
443.333 414.632 li
cp
.905882 .964706 .968627 rgb
f
388.693 285.373 mo
386.208 279.234 li
410.768 269.293 li
413.253 275.431 li
388.693 285.373 li
f
398.892 311.123 mo
396.407 304.984 li
420.968 295.043 li
423.453 301.181 li
398.892 311.123 li
f
409.698 341.833 mo
407.214 335.695 li
431.774 325.753 li
434.259 331.891 li
409.698 341.833 li
cp
f
422.95 370.001 mo
420.465 363.863 li
445.025 353.921 li
447.51 360.059 li
422.95 370.001 li
cp
f
469.41 408.595 mo
462.573 409.354 li
394.384 240.899 li
400.522 238.414 li
469.41 408.595 li
f
433.295 396.111 mo
430.81 389.973 li
455.371 380.031 li
457.855 386.17 li
433.295 396.111 li
cp
f
449.238 248.299 mo
449.238 311.342 li
420.736 311.303 li
420.039 259.522 li
430.411 237.722 li
449.238 248.299 li
.8 .8 .8 rgb
f
454.077 376.859 mo
454.077 376.859 446.224 379.021 440.311 380.14 cv
438.929 380.402 437.924 381.6 437.924 383.006 cv
437.924 383.018 li
452.473 383.183 li
455.339 383.183 459.518 383.005 462.159 381.701 cv
462.082 383.018 li
467.023 383.018 li
466.931 378.699 li
466.894 376.98 465.491 375.606 463.772 375.606 cv
454.077 376.859 li
.0470588 .0470588 .0470588 rgb
f
460.094 237.722 mo
458.581 307.525 li
458.581 307.525 467.136 368.801 467.588 377.334 cv
447.412 378.558 li
438.587 309.163 li
436.333 244.557 li
460.094 237.722 li
.380392 .396078 .576471 rgb
f
461.974 377.708 mo
461.969 377.675 li
462.367 377.651 li
461.974 377.708 li
.0352941 .0352941 .0352941 rgb
f
461.969 377.675 mo
451.767 308.137 li
452.075 249.493 li
452.872 249.497 li
452.56 308.082 li
462.763 377.593 li
462.367 377.651 li
461.969 377.675 li
.290196 .301961 .439216 rgb
f
411.858 329.139 mo
411.858 329.139 407.908 330.462 403.093 331.654 cv
401.724 331.993 400.795 333.269 400.897 334.676 cv
415.42 333.783 li
418.278 333.574 422.434 333.093 424.973 331.6 cv
424.991 332.919 li
429.919 332.559 li
429.513 328.259 li
429.352 326.547 427.852 325.279 426.137 325.404 cv
411.858 329.139 li
.0470588 .0470588 .0470588 rgb
f
421.122 229.96 mo
403.487 259.085 li
403.487 259.085 411.695 319.869 411.37 329.298 cv
430.3 329.171 li
424.185 263.585 li
436.454 248.025 li
436.454 244.439 li
421.122 229.96 li
.301961 .321569 .466667 rgb
f
416.982 329.261 mo
412.747 261.21 li
429.488 242.002 li
430.481 242.437 li
414.206 261.627 li
417.977 329.254 li
417.719 329.256 li
416.982 329.261 li
.231373 .243137 .356863 rgb
f
420.039 234.21 mo
420.382 243.162 429.304 245.962 435.75 245.46 cv
448.119 244.497 459.309 241.965 458.965 233.013 cv
458.622 224.061 448.293 217.19 435.896 217.666 cv
423.499 218.142 419.695 225.258 420.039 234.21 cv
cp
.380392 .396078 .576471 rgb
f
452.473 228.644 mo
452.473 228.644 452.383 190.272 455.717 174.585 cv
456.538 170.726 450.777 162.983 447.19 161.341 cv
446.214 160.334 li
423.616 160.218 li
423.075 160.663 li
417.794 165.46 418.818 177.132 419.068 187.07 cv
420.039 231.657 li
452.473 228.644 li
.458824 .686275 .737255 rgb
f
438.254 139.032 mo
438.254 139.032 435.583 156.443 445.341 160.782 cv
424.102 161.111 li
424.102 161.111 429.701 152.705 425.273 144.534 cv
425.273 144.534 435.182 137.185 438.254 139.032 cv
cp
.988235 .839216 .694118 rgb
f
426.475 147.414 mo
426.475 147.414 434.154 141.667 432.355 144.814 cv
430.115 148.732 426.942 150.303 426.942 150.303 cv
426.475 147.414 li
cp
.756863 .588235 .419608 rgb
f
423.45 129.335 mo
423.714 136.129 428.034 140.482 434.828 140.218 cv
438.847 140.067 442.539 138.935 444.669 135.872 cv
445.251 135.035 446.726 133.568 448.129 131.534 cv
450.354 128.313 451.048 124.302 449.342 120.777 cv
449.238 120.562 li
449.07 120.227 448.903 119.892 448.712 119.557 cv
448.034 118.313 447.228 117.117 446.303 116.136 cv
446.271 116.104 li
446.166 116.005 li
445.959 115.795 445.749 115.587 445.53 115.402 cv
445.267 115.179 444.996 114.972 444.716 114.788 cv
444.621 114.733 li
444.581 114.701 li
444.27 114.509 443.951 114.35 443.616 114.214 cv
442.603 113.808 441.67 113.481 440.809 113.209 cv
440.57 113.13 440.347 113.058 440.123 112.994 cv
437.914 112.34 436.24 112.109 434.988 112.085 cv
434.757 112.077 434.549 112.077 434.35 112.085 cv
432.189 112.173 431.519 112.922 431.519 112.922 cv
431.519 112.922 430.993 113.393 430.187 114.198 cv
429.98 114.406 430.424 115.685 430.185 115.933 cv
428.949 117.216 426.663 117.994 425.251 120.043 cv
423.433 122.675 423.347 126.624 423.45 129.335 cv
cp
.0980392 .0980392 .0980392 rgb
f
440.554 138.026 mo
441.032 138.384 li
441.407 137.89 448.281 128.696 449.238 120.562 cv
449.07 120.227 448.903 119.892 448.712 119.557 cv
448.201 127.802 440.65 137.898 440.554 138.026 cv
cp
.0392157 .0392157 .0392157 rgb
f
441.58 129.975 mo
441.57 130.445 441.53 130.935 441.48 131.425 cv
441.41 132.225 441.28 133.035 441.11 133.855 cv
439.34 142.495 432.24 146.335 427.59 147.385 cv
424.11 148.165 421.64 146.625 420.52 145.135 cv
420.05 144.505 419.65 143.755 419.47 142.505 cv
419.46 142.505 li
419.39 142.005 419.34 141.425 419.35 140.745 cv
419.35 140.515 419.36 140.265 419.37 140.005 cv
419.39 139.515 419.43 138.965 419.5 138.365 cv
419.7 136.385 420.15 133.815 420.93 130.405 cv
421.27 128.975 422.26 125.955 423.37 123.125 cv
425.48 117.765 429.91 115.255 433.99 116.085 cv
438.83 117.085 441.85 122.945 441.58 129.975 cv
cp
.988235 .839216 .694118 rgb
f
438.502 136.693 mo
438.502 136.693 443.455 133.422 444.05 135.897 cv
444.644 138.372 435.797 145.008 434.209 143.411 cv
432.621 141.814 438.502 136.693 438.502 136.693 cv
cp
f
425.044 120.067 mo
425.044 120.067 425.116 120.059 425.251 120.043 cv
425.762 119.996 427.117 119.884 428.863 119.94 cv
429.079 119.94 429.31 119.956 429.533 119.964 cv
430.953 120.036 432.564 120.227 434.158 120.626 cv
434.366 120.673 434.573 120.729 434.78 120.793 cv
436.32 121.24 437.811 121.901 439.047 122.882 cv
439.23 123.018 439.406 123.169 439.573 123.337 cv
440.378 124.063 441.04 124.964 441.503 126.04 cv
442.197 127.659 443.983 123.098 445.171 119.637 cv
445.434 118.871 445.665 118.162 445.849 117.587 cv
446.128 116.71 446.303 116.136 446.303 116.136 cv
446.271 116.104 li
446.192 116.024 445.929 115.785 445.538 115.45 cv
445.315 115.267 445.035 115.044 444.716 114.804 cv
444.621 114.733 li
444.581 114.701 li
443.752 114.095 442.691 113.401 441.503 112.867 cv
441.2 112.731 440.905 112.603 440.61 112.484 cv
440.363 112.38 440.115 112.277 439.876 112.189 cv
437.986 111.455 436.28 111.009 434.621 110.769 cv
434.39 110.729 434.158 110.697 433.927 110.674 cv
432.516 110.506 431.136 110.482 429.717 110.546 cv
429.501 110.554 429.278 110.562 429.063 110.578 cv
428.401 110.618 427.723 110.674 427.037 110.737 cv
425.769 110.857 424.741 111.04 424.366 111.288 cv
421.966 112.922 425.044 120.067 425.044 120.067 cv
cp
.0980392 .0980392 .0980392 rgb
f
430.684 129.683 mo
430.847 129.237 428.136 126.274 426.184 125.991 cv
424.233 125.709 423.592 126.972 424.051 126.954 cv
424.51 126.937 426.492 127.341 427.382 127.92 cv
428.272 128.498 430.576 129.976 430.684 129.683 cv
cp
.176471 .176471 .176471 rgb
f
423.37 139.315 mo
423 140.055 422.33 140.905 420.79 141.045 cv
420.19 141.095 419.72 140.985 419.35 140.745 cv
419.35 140.515 419.36 140.265 419.37 140.005 cv
419.39 139.515 419.43 138.965 419.5 138.365 cv
420.26 138.715 421.36 138.945 422.89 138.675 cv
423.26 138.605 423.54 138.985 423.37 139.315 cv
cp
1 1 1 rgb
f
427.279 131.378 mo
424.446 129.861 li
424.102 130.568 li
427.3 131.98 li
427.279 131.378 li
cp
.176471 .176471 .176471 rgb
f
424.422 131.411 mo
424.165 132.111 424.293 132.802 424.709 132.955 cv
425.124 133.107 425.67 132.663 425.926 131.963 cv
426.183 131.262 425.815 130.592 425.4 130.44 cv
424.984 130.287 424.679 130.71 424.422 131.411 cv
cp
f
439.887 155.065 mo
431.357 156.977 li
426.427 155.581 li
423.229 160.856 li
447.19 161.341 li
447.19 161.341 440.665 157.097 439.887 155.065 cv
cp
.627451 .615686 .623529 rgb
f
422.615 161.111 mo
425.097 163.779 li
431.798 160.697 li
438.393 164.148 li
442.771 158.105 li
442.013 157.307 li
439.641 154.506 li
439.641 154.506 435.347 156.159 432.221 156.247 cv
429.765 156.311 426.431 155.585 426.431 155.585 cv
424.502 158.759 li
424.143 159.349 li
422.615 161.111 li
cp
1 1 1 rgb
f
468.771 310.214 mo
457.97 212.059 li
457.97 212.059 458.224 192.094 456.844 177.609 cv
456.052 169.301 450.91 162.042 443.337 158.536 cv
443.281 160.401 li
441.335 229.555 li
443.041 311.334 li
468.771 310.214 li
cp
f
445.823 222.804 mo
445.646 219.617 li
455.534 219.097 li
455.71 222.254 li
455.783 223.575 455.338 224.845 454.456 225.83 cv
453.574 226.815 452.361 227.398 451.041 227.472 cv
449.722 227.547 448.451 227.099 447.465 226.218 cv
446.48 225.336 445.897 224.124 445.823 222.804 cv
cp
455.358 215.921 mo
455.49 218.301 li
445.602 218.821 li
445.471 216.47 li
455.358 215.921 li
cp
444.653 216.116 mo
445.027 222.847 li
445.112 224.381 445.789 225.789 446.934 226.813 cv
447.996 227.763 449.344 228.277 450.758 228.277 cv
450.867 228.277 450.976 228.274 451.085 228.267 cv
452.618 228.182 454.026 227.506 455.05 226.362 cv
456.074 225.217 456.591 223.743 456.505 222.21 cv
456.132 215.478 li
456.126 215.373 456.078 215.274 456 215.204 cv
455.921 215.133 455.815 215.1 455.712 215.103 cv
445.029 215.696 li
444.809 215.708 444.641 215.896 444.653 216.116 cv
cp
.458824 .686275 .737255 rgb
f
441.69 138.404 mo
441.845 138.33 li
442.306 137.757 442.442 137.321 442.261 136.997 cv
441.972 136.48 440.995 136.589 440.884 136.603 cv
440.775 136.617 440.698 136.717 440.712 136.826 cv
440.726 136.935 440.824 137.011 440.935 136.999 cv
441.199 136.965 441.788 136.968 441.913 137.192 cv
442 137.349 441.863 137.672 441.534 138.08 cv
441.565 138.36 li
441.69 138.404 li
cp
.756863 .588235 .419608 rgb
f
441.479 131.423 mo
443.736 127.667 446.128 122.452 445.849 117.587 cv
445.809 116.862 445.705 116.152 445.538 115.45 cv
445.53 115.402 li
445.267 115.179 444.996 114.972 444.716 114.788 cv
444.716 114.804 li
445.211 116.343 445.323 117.978 445.171 119.637 cv
444.844 123.257 443.249 126.965 441.583 129.972 cv
441.567 130.45 441.535 130.936 441.479 131.423 cv
cp
.0392157 .0392157 .0392157 rgb
f
439.047 122.882 mo
439.23 123.018 439.406 123.169 439.573 123.337 cv
440.841 120.067 441.567 116.495 440.809 113.209 cv
440.753 112.962 440.689 112.723 440.61 112.484 cv
440.363 112.38 440.115 112.277 439.876 112.189 cv
439.972 112.452 440.052 112.723 440.123 112.994 cv
440.937 116.152 440.267 119.653 439.047 122.882 cv
cp
f
421.435 129.377 mo
421.435 129.377 419.514 132.976 417.31 133.668 cv
415.507 134.235 420.727 137 420.727 137 cv
421.435 129.377 li
cp
.988235 .839216 .694118 rgb
f
419.085 164.61 mo
415.06 177.46 li
417.56 181.835 li
415.185 186.085 li
418.637 210.049 li
418.713 210.577 419.494 210.512 419.482 209.979 cv
419.085 192.07 li
423.075 160.663 li
419.085 164.61 li
.764706 .858824 .854902 rgb
f
443.337 158.536 mo
445.116 163.137 li
442.96 170.418 li
441.335 173.809 li
449.238 183.21 li
441.728 215.605 li
439.537 162.569 li
442.013 157.307 li
443.337 158.536 li
cp
f
431.123 156.235 mo
430.77 161.169 li
431.68 160.808 li
432.59 161.111 li
432.378 156.227 li
431.123 156.235 li
cp
.254902 .419608 .447059 rgb
f
419.856 223.28 mo
441.567 221.338 li
441.331 229.727 li
420.039 231.657 li
419.856 223.28 li
cp
.2 .188235 .2 rgb
f
425.443 222.78 mo
426.132 231.158 li
431.897 230.592 li
431.24 222.261 li
425.443 222.78 li
cp
.737255 .737255 .737255 rgb
f
208.018 112.502 mo
206.244 110.418 201.826 112.482 197.393 117.377 cv
195.663 119.287 189.455 133.499 196.268 127.627 cv
197.191 126.831 200.112 123.076 201.51 121.668 cv
203.56 119.605 208.018 112.502 208.018 112.502 cv
cp
.988235 .839216 .694118 rgb
f
201.925 207.45 mo
202.645 207.162 204.31 208.895 200.81 212.832 cv
196.949 217.176 187.137 224.258 171.745 227.499 cv
171.309 225.341 171.16 219.787 171.12 218.467 cv
179.73 217.057 194.088 210.579 201.925 207.45 cv
cp
.552941 .678431 .698039 rgb
f
195.56 202.082 mo
199.244 204.128 203.341 205.457 202.957 209.204 cv
202.957 209.204 198.841 211.637 198.935 210.457 cv
199.268 206.276 198.55 205.061 194.435 203.249 cv
192.716 202.492 193.918 201.17 195.56 202.082 cv
cp
f
247.213 208.35 mo
245.048 207.374 244.856 211.633 246.672 213.767 cv
264.255 234.433 301.395 225.64 301.395 225.64 cv
303.12 225.274 303.346 222.904 301.721 222.219 cv
301.721 222.219 li
298.629 220.913 295.33 220.187 291.974 220.079 cv
284.617 219.842 268.704 218.04 247.213 208.35 cv
cp
f
253.158 202.244 mo
249.475 204.29 246.185 206.293 245.555 209.26 cv
245.555 209.26 249.853 211.801 249.783 210.619 cv
249.539 206.458 250.32 205.054 254.435 203.241 cv
256.154 202.484 254.8 201.332 253.158 202.244 cv
cp
f
374.823 231.657 mo
374.823 233.623 373.229 235.216 371.263 235.216 cv
369.297 235.216 367.703 233.623 367.703 231.657 cv
367.703 229.691 369.297 228.097 371.263 228.097 cv
373.229 228.097 374.823 229.691 374.823 231.657 cv
cp
f
373.173 231.657 mo
373.173 232.711 372.318 233.566 371.263 233.566 cv
370.208 233.566 369.353 232.711 369.353 231.657 cv
369.353 230.602 370.208 229.747 371.263 229.747 cv
372.318 229.747 373.173 230.602 373.173 231.657 cv
cp
.286275 .286275 .286275 rgb
f
333.144 289.191 mo
333.144 291.157 331.551 292.751 329.585 292.751 cv
327.618 292.751 326.025 291.157 326.025 289.191 cv
326.025 287.225 327.618 285.631 329.585 285.631 cv
331.551 285.631 333.144 287.225 333.144 289.191 cv
cp
.552941 .678431 .698039 rgb
f
331.494 289.191 mo
331.494 290.246 330.639 291.101 329.585 291.101 cv
328.53 291.101 327.675 290.246 327.675 289.191 cv
327.675 288.137 328.53 287.281 329.585 287.281 cv
330.639 287.281 331.494 288.137 331.494 289.191 cv
cp
.286275 .286275 .286275 rgb
f
139.963 212.033 mo
132.971 211.706 li
132.249 211.672 131.691 211.059 131.725 210.337 cv
131.843 207.793 li
131.877 207.071 132.49 206.512 133.213 206.546 cv
140.204 206.873 li
140.927 206.907 141.485 207.52 141.451 208.242 cv
141.332 210.786 li
141.299 211.508 140.686 212.067 139.963 212.033 cv
cp
1 1 1 rgb
f
140.267 211.345 mo
132.54 210.923 li
132.64 209.095 li
140.367 209.517 li
140.267 211.345 li
cp
.227451 .227451 .227451 rgb
f
423.775 179.618 mo
417.439 179.322 li
416.784 179.292 416.278 178.736 416.309 178.081 cv
416.416 175.776 li
416.447 175.121 417.003 174.615 417.657 174.646 cv
423.994 174.942 li
424.649 174.973 425.155 175.528 425.124 176.183 cv
425.016 178.488 li
424.986 179.143 424.43 179.649 423.775 179.618 cv
cp
1 1 1 rgb
f
424.175 178.995 mo
417.172 178.613 li
417.263 176.956 li
424.266 177.338 li
424.175 178.995 li
cp
.227451 .227451 .227451 rgb
f
248.339 89.9032 mo
241.347 89.5763 li
240.625 89.5425 240.066 88.9294 240.1 88.207 cv
240.219 85.6633 li
240.253 84.9409 240.866 84.3826 241.588 84.4164 cv
248.58 84.7434 li
249.303 84.7772 249.861 85.3902 249.827 86.1127 cv
249.708 88.6563 li
249.674 89.3787 249.061 89.937 248.339 89.9032 cv
cp
1 1 1 rgb
f
248.78 89.215 mo
241.053 88.7934 li
241.153 86.9654 li
248.88 87.3871 li
248.78 89.215 li
cp
.227451 .227451 .227451 rgb
f
114.182 134.308 mo
110.749 134.308 li
110.749 112.119 li
114.182 112.119 li
114.182 134.308 li
cp
1 1 1 rgb
f
122.413 134.308 mo
118.979 134.308 li
118.979 117.286 li
122.413 117.286 li
122.413 134.308 li
cp
f
130.643 134.308 mo
127.209 134.308 li
127.209 112.119 li
130.643 112.119 li
130.643 134.308 li
cp
f
138.873 134.308 mo
135.439 134.308 li
135.439 104.064 li
138.873 104.064 li
138.873 134.308 li
cp
f
443.467 85.3545 mo
443.714 84.8524 444.006 84.3382 444.353 83.8156 cv
445.263 82.4453 441.271 81.7672 437.265 81.7672 cv
433.224 81.7672 429.168 82.4568 430.112 83.8218 cv
430.475 84.3465 430.793 84.8493 431.072 85.3307 cv
429.112 83.3676 427.87 80.4909 427.858 77.2807 cv
427.836 71.3416 432.034 66.5112 437.235 66.492 cv
437.245 66.4919 437.256 66.4919 437.266 66.4919 cv
442.453 66.4919 446.67 71.2832 446.692 77.2107 cv
446.704 80.4591 445.454 83.3754 443.467 85.3545 cv
.72549 .894118 .933333 rgb
f
432.298 93.5347 mo
432.298 93.5347 434.277 90.8562 431.072 85.3307 cv
430.793 84.8493 430.475 84.3465 430.112 83.8218 cv
429.168 82.4568 433.224 81.7672 437.265 81.7672 cv
441.271 81.7672 445.263 82.4453 444.353 83.8156 cv
444.006 84.3382 443.714 84.8524 443.467 85.3545 cv
441.231 89.9187 442.861 93.4956 442.861 93.4956 cv
432.298 93.5347 li
f
442.885 99.8089 mo
432.331 99.8481 li
432.318 96.3769 li
442.872 96.3378 li
442.885 99.8089 li
cp
.380392 .396078 .576471 rgb
f
442.874 96.9668 mo
432.321 97.0059 li
432.308 93.5347 li
442.861 93.4956 li
442.874 96.9668 li
cp
1 1 1 rgb
f
429.646 76.2449 mo
429.771 75.035 430.062 73.2411 430.732 71.9301 cv
430.929 71.5425 431.36 71.2046 431.684 71.2739 cv
432.532 71.4367 432.567 72.6101 432.253 73.4504 cv
431.945 74.2763 431.648 75.3638 431.563 76.6272 cv
431.508 77.4265 431.014 77.9889 430.484 77.8373 cv
430.381 77.8076 li
429.893 77.6678 429.571 76.9765 429.646 76.2449 cv
cp
.956863 .956863 .956863 rgb
f
444.081 67.2485 mo
443.956 67.2485 443.83 67.212 443.72 67.136 cv
443.429 66.9361 443.356 66.5383 443.556 66.248 cv
445.775 63.0247 li
445.974 62.7339 446.372 62.6606 446.663 62.8608 cv
446.953 63.0606 447.026 63.4585 446.827 63.7487 cv
444.608 66.972 li
444.484 67.1519 444.284 67.2485 444.081 67.2485 cv
cp
1 1 1 rgb
f
447.472 71.9909 mo
447.167 71.9909 446.897 71.772 446.843 71.4614 cv
446.783 71.1141 447.015 70.7836 447.363 70.7231 cv
451.219 70.0537 li
451.565 69.9938 451.897 70.2264 451.957 70.5738 cv
452.017 70.9211 451.785 71.2516 451.437 71.3121 cv
447.581 71.9815 li
447.472 71.9909 li
cp
f
426.25 72.0694 mo
426.145 72.0607 li
422.284 71.4199 li
421.936 71.3623 421.701 71.0336 421.759 70.6857 cv
421.816 70.3377 422.146 70.1011 422.493 70.1603 cv
426.354 70.801 li
426.702 70.8587 426.937 71.1877 426.879 71.5353 cv
426.827 71.848 426.557 72.0694 426.25 72.0694 cv
cp
f
436.697 64.9631 mo
436.352 64.9631 436.068 64.6885 436.059 64.3418 cv
435.953 60.4301 li
435.943 60.0777 436.221 59.784 436.574 59.7747 cv
436.915 59.7616 437.22 60.0434 437.229 60.3958 cv
437.335 64.3075 li
437.345 64.6598 437.067 64.9535 436.714 64.9628 cv
436.697 64.9631 li
cp
f
429.793 67.4843 mo
429.613 67.4843 429.434 67.4085 429.308 67.261 cv
426.763 64.2884 li
426.534 64.0206 426.565 63.6175 426.833 63.388 cv
427.101 63.1588 427.504 63.19 427.734 63.4578 cv
430.278 66.4304 li
430.507 66.6982 430.476 67.1014 430.208 67.3308 cv
430.088 67.4338 429.94 67.4843 429.793 67.4843 cv
cp
f
172.12 212.345 mo
172.12 212.345 167.06 215.668 166.452 221.511 cv
165.887 226.947 168.977 232.183 168.977 232.183 cv
168.977 232.183 172.591 229.794 172.591 229.054 cv
172.591 228.313 172.12 212.345 172.12 212.345 cv
cp
.988235 .839216 .694118 rgb
f
116.2 189.385 mo
116.646 189.771 116.588 197.882 120.417 205.668 cv
126.513 218.067 137.378 232.183 137.378 232.183 cv
166.551 220.802 li
168.977 232.183 li
168.977 232.183 147.894 243.045 141.695 246.848 cv
133.622 251.801 128.543 249.657 122.512 242.354 cv
100.73 213.585 li
116.2 189.385 li
cp
1 1 1 rgb
f
410.908 208.719 mo
410.908 208.719 li
410.908 208.719 410.908 208.719 410.908 208.719 cv
.792157 .792157 .792157 rgb
f
419.737 217.793 mo
410.908 208.719 li
410.908 208.719 li
410.938 204.781 li
419.621 212.49 li
419.621 212.493 li
419.737 217.793 li
.85098 .85098 .85098 rgb
f
419.75 217.807 mo
419.737 217.793 li
419.621 212.493 li
419.75 217.807 li
.392157 .584314 .627451 rgb
f
402.143 182.502 mo
399.893 184.668 396.443 190.459 396.443 190.459 cv
417.484 212.647 li
424.675 218.152 435.103 215.699 439.087 207.567 cv
452.06 181.085 li
443.895 159.982 li
427.32 196.418 li
402.143 182.502 li
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (Myst) ()
%%Title: (z122-01.eps)
%%CreationDate: 7/17/2018 1:22 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj]W)oD&@UIQmWMdY!jo&1lM#D4iJ3&5!=a!kf+Z&d'SnR\S\f+8fIBIqBu%aD#s:Nm2`]_dmkJ1n%&^BjkGVhPld_[>W<+
%5H>YHZY\;a`eGSqn%TVRSs5:fekh<Q^"B:g[J"%8?4:#>Xa6i#Coq<XIe^=p^4-1@pmJTWV,I>bfrXtf.k$V9[8.1l8l2HFX+!,T
%Z3C?S;_%^N"f7jnr(M(mFLMUMj.P4_:-dXbma9<l]LhH,r`OXK_;Xa5@uCkX`Sk/3rj=sM%[6qHpg`7FO8#lIgoca`*X<.hl*nk/
%)Dngi@IRnA^<GYjF2(XfbPl#r/GRl3Qbb-mA.BL`Bi-;[SRD*1:k.PEbRFULcSEE<,IH<'pmGd=N$[4=4Nq:S>TsFuA(g?/<s;]%
%!si&*:=A>al]%q%]P@+5,(=kO<#ZRe*RH'Qa3ND,A^9h<pb*O'ArdLiR;$7rO]f+%4"GPF\7X=N:iV:0nON)N*.2,<4:1p`cr=hC
%CUT;Is+BRUY!A<fpo%*tRP/I<2Y9u\b`fB??S;Qt(k\c3U#H_]`.igA<Z!35o-.iM'A"`TS>=\oCZt5YGH-#hNr[juWC@@961(KI
%ME8>m4I36./8L+Oj,V1d`q;.iR-DV(Y#U`h*_YgF*LsW,i80)uq4_+u>rH-:"_W^tGFIVk`7H\^Y5F3Vah"`!:]IAR!nlsa:t%R?
%r,c^=[R,r>r\6=E>q9dBX#U)1r,jfG:;F07e1]=\d4b,4<7,D.=pT*D]FG+f26?TA^RiX;gsa/5#JSu-eiSlIg3NYc^D:meqH8p5
%/(]B3r%^XshTII!0U_IIZq^AVL_$@jnAF2ii"l4rJAIs:*JZ+p1:sBuO$lCe0/r<YB_hEQBGW=OWGPeW:UU0O.(8G9i8deui9UjL
%6>c==4&#W]>6k<3AV,FfD3!Ldj;4,W^0jf($\,VdDX3<Lh-kYE3X<=Ge?]3fku[h%RdqR&@3D9O5*uP@rP<qC7asAd+X*-q!r`p\
%jK4BBCV09lW72d=^8s4e#7`85c#:TKp#k)E$&)f,*OD(GJ-4j@=INf[p_;P;QE_Z#qb=(S_tn;e/="!C/;TDoZ*.%_jgQm/\H]H>
%ldnX^3O0ce$N=gVHlRZ"k`Ta29uj^?8u6p_oGa.Y@V2t"BjG=GlLi;<kTl56P+F*Y[b*.=cnmINc_?k?r5CQ<*cQqHG^l^)f\;WH
%cjlMPK:8<fhaf1T,H2eB7>C1$#\lUbaq"AO8I8&g?J\WOg#5OUF4jKlE)+D$`l`+ab+Q<MaMac3a5;<lc[4c[<5Rhn8+iri.CZ=>
%).4hG4q3DbBiiQ8Un6[-b,XAEnSKVMQ'l)l)F"(NAKh:R[;q+T")fWUD4l"FS*b7$&fgpb[=_HTn$kpKdQRV(0;]R\oXc@45p[n(
%6$L;rPUL-@2Me-?bpC1cf!<D5c1&Yq'7';a>Qa^FF5/4R")4R9AG7XWoi9W)lrl+iUD/\tL>@Y85)sqsT7VJ3\"B"R7p=KfOC''D
%g&V;_NIK;Jpc5Yf^V/=XHO`d^IEn1;kgT=O+!\L'b:NWkXjl:PAJhU_q5i$T^fFP=`*BY5GN0AjbEYs]W"B6[XR+Nld?jW0qZg;D
%nDtiMN.lVHQ"-c"G*,2hk#XSNl[-1l^)VZ(o;`K33hYu.-CU=FTR:b4:-jk/*#CVLM"rD%*WJek#sV=Ln7-hkjE=<b<?#*D93G^A
%Vee2$j\cH6&8>CVe]HF&`<So^FAAQh@QQ#p940EL,A#:kA@p;Ql[[;\$q?;</2_HM_TKnc:p#3%/lSQV'KIb^_e<JIa\H6):#][m
%HSf/DIOcg'K<H;_ehlrq$\)F"+Y/R"Xr4T-Pr&hC,E@[%5+7d@Vg;0Uqqk:+?lV2'YSkr12QYr6Kk,-X8nc0>4ad%F1,Bap*(=DO
%&N"oTo287UKK:_d40Edr`F)3UL/M^Q61cN]GAYbS6+JmeM'_EE@p^lnokL8Y,+gL,Eqr)9+Ceu)#?LE3H"Lp]fhEG@F3ea08=3<$
%cC0*'rsd<B]]k'Z=F"4+\)tE\<;:VcJhD,rDA$3d'Jadug<Ep8\SLrGP$m_3rHDO/9`6fr)K\KKjD,0J]]OIj*knKFrV<GH<&R^Y
%"&g0=3djP3USrQ*HbMl=T<[FG6+-\DK`r!o<mhFKAUH<%=2+Pr#0gE$'Q!ZkPd[7'*1PcUJt01*,*cb@GiL!EeYl<!o-eX:I\hkB
%mO9QA:rc!=bHNjAA=*gU)]AERK?s&U)Q(N8VNj?BOYn%sI*Q`#WUl%e::5^e.8l6A7ipFWV-.0%:)[o>Yf9,P.!m7(8%RgFeG7M@
%Pf+X[KpZ=m?EOaGKbO$j&bta@WbICMNf,aX6H)`a,2nk\A^$*/1M\0!=BucY<j&<_"r$4f4)"bIV0qd79W-lJ70;N5j)t3>Q,]Xb
%""sUVA`,>9`o(2bEj"GLNAH$gj*+\/Z<u?+9\![sJ=2>jV<"gO?hN"\>[Af;2\q:.3n/B#)'l,/;4^KX+EPu,5`1*NeY$3;pgbMq
%fK>]=1mhuj0IN?E1^j7sN9`S80+FX35m&&J%=YY=^8qP+1no2o[,^h4n<@V.e<^)5l,XREi'47fVf<s@RWEhH[5ZAkh%,qj!=n6O
%GAq+Hk'P2@4lh*6%lqT@Q2)KlHk3dFONdH\kBk9u8\lEX5=GQfWqMNGTAV=W2qCmlQMJ8bI,F^CcnXE:T'mWEpPnA5`q+W=h\SVJ
%?ukE,`fm`-;(A31G?Vg`]a!mj/Idd6PSfn_PBPn)K5mGOlQi^T7F_p[Wd?R:'g)I*#g5ZLQ8o+kh$(g\B;A?tS`Vr"'PZ_^M*Bn(
%DpgM+>2D'2PYtHP]CjUJWIoJLC`Xah8'$-Z26U:BK:oXWi]^HH\%[5e?i*m,=+^-L1FTBURso54-J(A%2E@HeHT"3'WQ`/'r+mE=
%qmim0GN3>[9sF`Ys0#\pUq2"*`#KS_M%o"R(&0@l1baYGjtKND9S&#5FB=5LrQ1(]UTp^bnl2nXfJ#*$HXQI'_aF_OnBi71%%Db5
%oYKU/SYCN/T*?.fW<0?<7E.f)$JhG'H]:R;Dio>'AKH*l"!l+n09[E$;.14XGYq<TMSI@;0D!!&4Rb*:]Z^I2om,KW58e\`TBr&<
%4J.H:+<;tfB<!1I1O!!@[=T#)+(CYGe$sliA2I''1r$6rRi^aH'kq?KoF!1tcnO]#<i!9J@t%k*=EVdQ>i;2;@rV#3A#7sEoZI?s
%m;qAK_*WFqQ/hd#Vo_bqo@oc^=?35p^_<mfYNZ?hNGb9Di\XlK3*g$#k;PBFDf?WL:5:u*&%nb`AniB3?"Pn^`+qCXVW*_>rkYsq
%]')f.bJ3O90O)>ZQ6i^A_jeFm0)rn[_/+72QnuegRGS$'@s<I"GdMLK0>3aD!8IG*M\..FS>PGu?[Io%$C&se^![b*?5aa1=<F@o
%RNF>+.%u*=h?quH)O`r@ji7,GLb;9Slj0eI@J!7%fK-4clQqro\p@EIMcX[3$*#r^@_)GIe]=VnDgnKD[j:L``HNc;AuB5]V5.a-
%Q;IZ#D^ni9bb^r.jfDTaUJnCP0[nT=ld@H:^MhA_Cn'k*Jbbjcds%_IpWHP!B;YB)rVTXn6u1ZTQ%$JB-V^*h0N5'dq-g8-+-ucJ
%YL&6WI%$GO;R:>ucJ11B>6`Q>co3i5_0)oUREk\QdaRqt]P_A"'MX?[1q/<jHUm3Ga<r]q5<hFtaV"IH$1`q<"LE&<DLR1b1(MFN
%:QSAVL7GXSfD,aD\T42CTfhS^EINLe16ghs"Si0Na8$&4\SdpDh)LB+jIaUq9Y^;@3O.0t8NpiEo4MUmoZY>tmDW%F`-Kfb[f+A?
%H9$u"--M;/Mm3%lLp0XacEGcZgZ<TucrOB1ljDaCPUi^ckYGTIMn#jN@^#=GDZti,n?iqZMJ3PAG2\L?[ZaJXXAa[6Uf^\SPoNWd
%<"D6kHqVG5ETAjTP*$D9foj#56ZjjG24+^gc8(.Ne*g3@),9MJ4BQVEEA?uUCBmJ@L8:V>[:`R?2tr*0[E00tZ[Ks9XB9n#r^>O$
%f?i%)Og1FnCn:>o16uS3QAe$EAJtq:#QN4tfQ"(n.DB>%k&Tdj@AqH3g6mOe'&6)EU<l2n4^g&#8H^T6k(q;>Ra]mK\qua_EH4sI
%-ChME2"_(G/En>=[5[87ZVYP"1&`nA1Yh]Md`h,Y6mm7,72VO#I[)hhR(scL1b!N]`M9CH,I>=!=XR]iAt@1ik%lqn2Ij'HbVmM1
%*'u7f*dKq`qR+n"RMQefOQU7/oPm#MD;q\CCS(WqMSP"CC:ol)4S7$>FsuH(=/jD,S=eopH&C^U8[81\4d`4hPNZ-dk,@HN/G899
%4pdFi(nAA71(1;!b[BROnM`[82c'5Im3h#DCm[n1_JerTD(NnAU@6%Gd&c,Mg'k"SD^bfQW45.%I?u:^N)Q6+.9'A3NT-s6\55;+
%euNNIK@%V,M-p)Hrtm!jP%(Z_2cIjbM)d2O.cjjlVmrk7kZ<Z=oe]EA%!?qU7P0<"n;G7\[8ZVE6mr\hj!)ZA_0Vq746.#i>\'Y8
%J)\qQ>CTBNN1R!orj\mXf1Nl)\X)Lbhe(4@r,t9SeAZCI72g9AihnfXiKm0uG'T`A:<ZmtRaU^#1LUj0<j&;4#_+H<1[PFTAo8tB
%Q!$97DYG6cQZ7=0)<RXAd>UDc;iVB#j,YG&ViLSh'O3hjD;"^F[ODfA.::QD+3QW<ETCT[*RK;p!89CKgpL'8kA0JrYIP>jJluH%
%.>D6Ek2pGsn=%7kj;;p>#t&SHg31""#$j"Z+'N,&L7mdtb+1AoEfE%2>I[WR'(hSm0BE^NOuq7]N-_gM=g-=.;XBXm-/WX-Ht"`(
%;@LBHo$&K<>k1V'jC=L\0Ub;AQV4<LIStFN@f(8c>R'Ga*=<D!7F!Ya6Va*I3lZDM7lhjB,lNZVd7;mq?l.I#-;ZaC]>0_UKB&KE
%n:^eXYticDVp2`V0Y`'O)E't24jZ3+#;2nQP^Jo-RjS*bWEH`QC.@'`NUCMQ]sU&CQV8]4T3b7faE=Q^,M`aS&oV#;2h08%U.#-t
%0J\.'3Xs]cT<k+!LBBY6pi#dAr@c-_r,7OSZ^lu28U(2;]#dJb!#VVnEEFm??`fnI7K0#.STpW3(14/7^K*L;&n(\]B8d%9Z>#[j
%aSG"5R+V^)BC3+lCM<R$f8]A<3CbR>Blns1'Bu'VoT/f@S5VNlJ$^$`I%]Acl0q3,)!2W&9rcW4EN4)OW\J\_F.TBdOnsKtW\I<"
%p`g"@r*?O0G0g03;g-XM(/3H+bj*T4\Z[o4^=mCoh(WL-lisdpO>HFK)ek+qMR+8DLrOAI'm(MEQrH-t`C\U*6t>Stc9.gUOf#?E
%!tgML1s@0_'C56bgR=a)2!,C08Xl,n6t7:cR$NP_0hW+<<5_I)6t6GhU6q@<.(HkZ&oXIOo!<1&&IouFD,lVf]C5!R7li!Irb@M*
%,!Goh$C)Mi/7IXMHEgqV?c=d4pK9%X`BWD:9kjsm=5Ln7V[Ye==(/BE8u,ZO'-HJ,^T9-`pZDJ3gu"UuHiL[lQbobmqg5[-n'0d#
%c84nYV+@b\4+*7Mn>2MN\\g@MpuW(Dgu4_aI+S"QfIT%11NqUP/7^<0RZaZ>q.t?*4Sj?uY@X^"Ac-t*,5XUajfrWZ<;$&k46+*2
%BNA$9s%lJQUsehG+5cilQKU255+7D7\JY2GMe1=jf.7*!dY%ed_X$+L.;%KXbUc/Mc;M/8e$Hd/n2/di>2W?WoZ@S[USZtO8RLd>
%^)*0R*1kTl^p>k`rj2sq'\O28Z4f4&'/V:uB?I\>;]O(rV0s"mb`?2WK$Hrq1+*#jn$<^E2)Q"+%5AO2eWEM0-+.m[f4mV532cu!
%F>9QI,3,Ed.)ipZp$(co11kBe0=Mi7^DKq&>'o.F9Von2qG:ITXgY4uFGu1XPNhna&g'UW9HVa9E#N_j-/ukDg(Z9Ll-W?WLm]$:
%H4+)Qh&dsh-<n3\GoLfC0DnG]@hZWB;u"hjZg*&3;2]-^:H<=t_>dEO:!_"J9"KtPb4m;?`I,,[Bl'O?ph32Arm%#+C7;[UZuOLP
%=2+Pr#$GG-C!lXD.E."Z*1O4%Jt01*,*`^@GiL!E;Q^1PMC[qKI\jP]:NJm%%!>fCe`sOVP0>Qp44VW<r/Wg7ETFAr[1mFY8om:p
%`#9F0.?(_1/Et0H;u]?`<"a[c6oG.)0;P8E<%>B#hboRPU5md1n8%-#W^X8dVg:$!(U>[>_MtY'OGQl*V+d+1`(Wi!@\/E38b(J5
%S2KPHIE"'?B)!FQi[gq#YS;F$;jWE*Aqm0Ooh9W`8da$f8odd@6L1FN)3^\N;OjRgPVg>&F&D)1.0#%1RHL;<R'/:i!G+01;,U!(
%M-%*kP`(]ZQt`h(kIE!(QM!Z,U86eRM-oq^P`(]ZQt]^r^N5`R)KTXkc/gf`f/Vr6\f]3iQ/OTmM<VXB@X9B\O7m%Q4d`3Q%I(_f
%e!:eldq*CAT6c$%)Dt]e(uVdVr=_!m0AU?UqI`hNLqMTP1NPkVCP"1X;sUbBkY_i*>gU_!h-A<XTNfM)1?3Jg<XK!O_/'7F5-NQJ
%Tp@T9[(NKuS!`dgs5rdbSi>jp=+5?ql+l0]FKI+:W`&dHaD<arXinr&?h5p9U`M?cd)T!jB&pF*I\frVONaFq:[7Vq$N/^/?M=2@
%j^':73Wqhr]CQ7u)pggF?r.C(45>eQ<e_IrrSSbM2^a'(pHA=XY1Z!Vs/6&P=:NSkp$Xd7%@>#mq[X0X4ug!lHuO`F+"[<nIc.P_
%0.[2hg[G=F3oVCR(T(lp\iMHF)jMPIb/bR\?[A1Fs1Ik6EWgl'*R!L`8C%XdAZgq5\7]ao5.D##Qj"QK1EC?\4rC`oo$!RCf#(JC
%DgpV_:Z9b=J:32Mbj9!!Il&pW^Z!?\>Y*4`$$pj[_g!<1a1:'EEK#mukb103.m^cf8Ep]2O;s=$bJ?A(Xs9mGJpFN`^^&2jKVQ,9
%_onGf;2`WF[9tg3-NDU@CY:DI8E$'<aZ2pskjQ7rMt"%jOV)d1HE=AQDRFtG*I:4T<qMUR$5/304T82@X&lO*rth#$?-kkh.+7\Z
%@L'ATo6qYRE8bn-"-?aWf7_]W5YNKtq0K9"!T[(tr*._LVH*ocU4q'iRXF(9nP63/qTWreejeqE5fPHH)I6ci>01-LI]-/8C]_7A
%]m(9N1sr9M)Kfa<#WsWd*V-!"gAi%7ju@%P3>Y(HMPL2HVYKgM)/?<+S>I6_Z@A/a>8b&8Au<Vo#hKk"X5D?`"iQr?L.=:_SQ<@/
%SH/3S7p0rAjeJ)r3Y^.RH;=Dtf$3aKP:$<QIqEIF\'D`a!.Rdq,]?]*`Rtj`[V]PUNWQsNK]5s,6r>&#8#""!R?`B0FRMXq-Xn_u
%NM!Z,P`<oHP-%Lc4j.OdCLkAC3q-WG8-2)`=g&@2kH*MEULGl9D]^gZ.INq'cL_m@)#JjeUC@%J92iT"7a?g.B_;*]0n=,UGnIF"
%ZG?6)CH%lC+aOMj"T'i94l"mCe=0HfOEaK]IU9/[6a;hCa3eNLHuQ,Os.pSg+MKGVG#JiQ*.9"jA@-lg2qmA.q0sj2,VeYBTPq2(
%40*Il\LNEXFA*cHT+hW&b[@2K^M!hR<f63AW#l?D.A8JpScttHXf]KQ*Q:o+3d]"C"KeG#A?ERq4fOVr0H!h.,8Kb#NaF6Ee(L36
%m_mad,;nr))_jo&-kjuSV(1\Ba$b'OFoHe5qG@^UI`ZL=8d2q(B=qU>bcR&^b=f5aA(X@1]NGPm&irdk@[/`NFYC5I==2f["K(B>
%14+K;U>oS`RDX?Ge'P/*>@<km4=N/1=WMldTOPU/jdmoC:E"\]'_P4YgoB8Cl@sjtBgkrM@BE!^B(P/.1V$8mSiQ@Gm@[V]?]Wb^
%ZLir`Y%mXh<P?l,>Vtai5m))LXZBdcQT;)L[,Ie?7GQnMR!BRafflJ6bu1Ep,!No<l6)VoOiYeo=rW<E(7V[^G[23f&_]soenXtS
%]H.5;="\&fd5VHe2XS>_Z33$0O^hZ:M&T;5)h0Nin/FY,H:Tt4l@W_7YqTH>XA6+dQ='OO[uM\R=CN`j_3,.ohh''Dn4u-P>q3>^
%ZZ8`@/\^*Q9'&f*EtlDpGHeW=YpIt>72.5Mc"kZpWk=mZD:Ys?KS,NU#Hc1208Yus4*jI8M'<1qFp"+Q7%r7X*>`$p[f:'kS*eEk
%4gT9Y4D9`J!4jY*EjEHHd@)3LZ5!eIX/kH%X]Xh<2=kG[Y]gio!G]gE<`+eqGL"M"'hj!I=#FRHCt5Qq^Ra'PMuB];,JC1Dru$gh
%\m-c9^UN3#U^O#hj:dr)9'N7@L<=%!WeE\4].G*tQ`6qj#,:WZP+LU!A08;GN?=Q_^NbI\WE'oo8DFOg!gYmeW)KPn<cg_q]nS(b
%!a6rB_([Dl's:cfrn2n#0'HWJ+R]XPV(/B3::`3_9O(tMfBaXGk*j-RoE]5#cZ^:(!;/r`A2Caf^Qn*e<s;Cn&TE<5#'NlT+hq><
%\'&"o<GL_ONbHTU^fMb<g&3:E7&`K-5GFP?\RLROAmDARlcUiS8f9e93-`$G;$fbO7kR'!`KsO5`sod#1gA_b7f15,:oWY6f'"kb
%lCcVk[C0H,0E.,gPZe(hWj1t&<EhQX^%/Wt9CPQ8L)e?o9LMe3&G21aCY[ip'&O$8<^"S(ID9b7g&!l8qHgiP2h"Y`mAlo5#-h(j
%T&g+G+Sim-j#ER^^!/sf-khYLoGOB@9Ggo\'6W*Nl!HcWa?r2I3pelNOVs9sokMUV6$7A`+6(6K]/W-d:9Kg#BNsS_rRs%/N1V/D
%9-UR#W0d?@+<kkJRZ2cu?-[t-j2X,?k+6G<mT/+/lS[de;3^+6o#,GK297Th>kBU7kT=jPZ(^nXF#T`,NIQG03?Hgp+*rk_4lB#m
%"mq^9R+U+t@TM($`c%HZb3]s*Q&6W'@+H(t*nnlq1%/=lX50ja"hgYMe+Pc0nj:?i14-jH5d(:E%>XZh)JoUG]Ua?RS=n=U>f,7q
%Zm/(d#Vp_N$/Bcd*AHn"%?0"Q?=0!aZQFQ&RLRKh*C4"!q^6Ml5a1D"CGA\\8Y3ch2nBbSF66PO\cHb`.n/OW@N?,OrW04g!_0mg
%n"%rIEQ1Y#8]);Cg=BX"<9hhmUS-#6Zm(pGL0kb_bu.C'_oJ11kOj#hHbH0IJ4.*'_TfaZ7k%QqWN=XF+jQ<f1`H$f3L!=7*C6:=
%m1+:<P3X.+'"H;0\Bq#'6%"Qg7ZoB.C2T%EF45bgTGGFb@PJ^Pcq^;=)<W?`OUgNr/'18Mh/&=k4m;%Q1g]eIiUJcp$aE22Q`N")
%GY-uD".$kE0ObYDjcHG[]>n_%o.RiX?nuaU1Z2K+nA1:%V@B/O,CRh``t\(6?AZPc/&cf<DiB='P"m@s/rnS!=0e[\h!\4reBcJd
%mp@`B/%eucE<pHW<!?9(WMT&PUGT8WR=cDd)L\Ug3NV_)[#7JT>qO8_4)8jgdCO>X8R8L<ZJIjj7#ht&ZA(4BZ](2D[K:bD@h5Y?
%U:0Ak[+UJ/AR[WB1Y*)'HWf;;a-Tpd;7qN)ml;lC!ISN_.aDJBiZ7OK+Kr)07*n43S&)jE,3lMH[P`SJYn+6qAE`DnZ$R5j@pO8G
%k(>.aX1R+V<S*5^_b>_Q1"IL=?g;:>ENSe#/T023!LU7Dc;Y"qcoMIh^4SH\d;PS@gJu!CFJU.(E^"e@Xu*K8KW3]BV-'pP*,K-#
%IMa)])J\HA$<Z`6OIN't\<3H^rFA='0BP9nMp$G<J!%k$(QE6^6u@@^JJu8D%d-*2Uf7#U0bB>I/IlP8M>1ojV6+4%;Z&7;k"2@X
%XYl?0!NBA-6lL;(PqZV]^QDtb']LeJ)Agr)Cf!K[A#O36Zkb^h6Q)9<U^i24N$5^Hna1?Y>!cA0pD'!M$Yfc\Ke?NX^T2!\2ig9T
%2X??"3":trjk>!.'HS1ei$s^i)7!Q?=3peVO"8SL$kS&2AX*>/*N*ZeEa2oCf5-7Lop]$bY+DH)Nd?ii3SosKlfc"4cB]q)Un:%i
%1sbKqTqW(f>+N!=9q)#mWs.QR*c582VNj:pUMW#-dTbC.E8e:$`1d97kSmA'dVp6o6r6%S&[bV@Ohu+,_#A?a&6kKM.;/q'7LQJQ
%2EJ9(k[-.fII$2cF8F#XIi@"9$Q\VFGG-m`h4&Ajg"-c-U'Gf@U/I&W^e);ON=]Y4A-=A1]]#u%r5haG=T^ADNT)XK6Puq6dn^gW
%c4FIj0NorJnf8r&iBft_LpNoQM<6.5[PP2e\!W0?(s0HN3bR;NlpJB09Uo^ofh.s$#jo9'.h:T/M57fCO<aYsN,\`!/^/2OJi;''
%.9>J@g1'A]B/?m+]d9$n`%oZE6!e(:bf.(hfl--U$2q\.OK0IdNc>f75DIm7&SA_))7lSqbZSZ#p027+1ekj78YHY-pjIj7UA@V8
%aOc=a0hXp).2r;_:H;]9'+:t'$4dQRe9+pup`C<IHiT*86o"L'=A;UMbuRYZQ:B.dl`/_?K=uFcPZQ!*^cP>$?0jM3Odf5dVX3;U
%Rem"NrNq$^$W^2<5SVt5ieWBOItGgOco_h*bX=4AN.gTV/P1cdf1IO)@q\&]/@C8,V-HrbU-t6;;TZ@X#jL'&a^Q]&9,!6C(j87A
%b@@4n+h`1@IuMThV:$MsZeipI=M_`e]L$'<o7^,2cW71XP:IRG&/]@F@7']@r'\4G6d9Y2>4>b`f>6.@Epu3qp/,e6O)cOh-]VZU
%kb="I;EVq>aQ^N,(3V7u@OF%+7'r\e%#&W2kK`&oMlJSor*]o#I9TuRFEijmOY:6Uh:0.P9seCZD2b*@/;uQKP>N>V,+].:67h2q
%C[k4:Yh4b,f[SJ820NLf=B;LI'tp=p7e^gMUZ,Ek'WK-_*#pam)42=1K;6[)>E>Ks$qhhc(6iBDK16+"%,G]8>O\T:W/-,Mq@XIC
%-WEV)W/)>O&PGj&*G:!N26.m76?OtuSZ%YKb/=M?MMR1c;TFS7;b_#,:'i_?$lt)qL6J:..]gdKo`?gjC\^5='>nZDD+'GNA6^L!
%opa;f5K2fM-@$H[a!W4V"m`r"@d>k@BWT,2?"6GGRN3M';88csa9ShVZeUA;P9D,`96k`lk"o,C+b_gER6\>6a)00ad2r*;;0^M?
%=0EtZpL9ierY8Wo*6S*rh?P\1i&;Q?pPs^;%WlXQ%\nsq!B-^gb-1o1q4>)2?Yc^+0W=jYl]lK-bj4T*?=R3L^JCnW]3hblMjM\7
%(!P7t20o-hYC/0"Ypue;-;-&?(>*cQDod%TnkcMR<2GbHP?>86ME-(;$HUj]M+9.QolgWG%'8BNb>.`3k*Nsg-8DSue,QZf`C6A`
%_mGUn_8:(RIi[F4(quXh;f(!"V0Gg_U_&&"pX:!Uh'E^#2I(J,CI`ab)i!=b4-FU*+0i!Aot80'7XH`ki(=PZhs8Ofd;,A0rS+&[
%8ZS=5X)GWt^'l4&.*F#_<Z`50M\Z<[MrH#&ZFjWnIBl\\]^S-*s6*X-n@dVO:JT8U53Ta&##%h8I$FUr[J23k,,MH_;F`s`*d:7"
%XNTegTK=#Dbt,N=S<`,^J8F[AD@]NHWMKBuAgnnMF2_bib\utG5Cu^u%I\8&Gj+D^od2)-^sYnPNt+l-/eg2iReFg\'TCg34)Lqe
%8a;E`2dC9GP"+-OFji3$_r:sXZ7=[]P[Pj31GE:.aR,+A"s9t-V4./5,DfX6h1monN6I(t`_j(pQP_X1e2m#fi=sjYm3<UkiS>HA
%1-0g0Y^9Yc[[('LDkr?L$H"E#4m:1:bgFHuYU.1deBP:Z)Wd!gG'@4R*u+5f1Oa+&5.L4`_><JQGLuaO92Eeo#KrSUc(4.]l:(*[
%e&%*@`Of>c5MNb$?9[$X[oPFomQB44*j>![\@]N'lkH#-2W&]pQt>)/N)opNraO!Z]s78[H[fORWR9F54l\'>bf8AnNMa^Ag>9Je
%nmZNIh$T1Oaq#R/o@`KdMk7BN8oLCh-XTtXFl)Mmo3X\!>47cDEn1"m/%9l\^3oE@h!,UEf'V(Y?Rg8,6SnOZj69_(g29"/\b#+*
%q[^6$XmE+)XiBm35AmQ0'g?N:[^+Egq5&d?@<&2e%aE@F'g@6]bFa93m;,f].W8A62_WoiQd.[Y(m3-gnjU"]F^tC?h:JqVk]CV+
%e&A4GI(Jo,^K]F*Z+94M\Xbfg^/^AfGiP,Od#@^1nNh0,BYR[)]!P5aeoM5]SHkY1QTdXdfXgscYSD9J5C3"pf&^)?k[3;Hnq6?$
%]h@$81KJn$=hai[[J]9'BsY,7q!N1o_1td'n+b10,iIP!g=&\.RLs>=5&TFr`OjY*&,4[VSEblbA]IqfSX[0%EL/hu>%M--`Ve39
%.i:;0DW&/cNRDQeCW2'#B)<)TQ^<<KMK;mb1q_XKf\"n`^\)o"ag:LEj8A=lEU/an<WD]!rDi+\.R1Q<Om7?o>6'g-M>Oc$>2G1h
%i^F<3lI"bE4gD(*oMoVO?ls=Sk?%TS4,"UahDMPUJR<f!=pP;#1!X\)>4g!j7tl*YC&R_u1PrlS[/F.Y`o$>mi8?Q6K1D!2Q[&N"
%`C!YQl\FeAV(^.Zd;4P#LADB<D;>V.D*AE@n1j20>C:[K=Fimpqo37IP_L,NpW&SE-b^:9-i#D+o&hOL^2EiIh:nFYm,a/u-i)4]
%\Wb3G4*Pq]\=YkA-F,n^q=sY!'IpfNIe3AT-QFGS]ErKSF;<?g<jKstHIC[$oB40K,oT[[f>%(<dB0h.EgEqABP..+4a=AK]m3f6
%BJqMN>-%P(+4DdOG.B&0#4F3.fW9Fl\jnPJH@4rL:s$huWh>cf#7inSKm\Sk)Gfa#phRnubDI?tZhh\q8c*,fjCu6T4.9H])&mlb
%qeqo^&9`X\m;'/#lQ3(OOV\]ImkjHL?&GD$gLnP&rHut./fDLa_mQ]rE^[e'f\=N=5%VZRlcYn.\7D4Co=J?L?V(8YX7#N0lEf9^
%Vp51Wf(i7r@*d+jKrn8G/P4ASo<>Q(&J&5=Q&G@m_fqSG:2W5]l3&pGr<No(4')dj[.RlKKoKf:YJ.16p9u!E#bRF:4,o_BT(cX;
%HJUM+CV-_Fq,Y%+(*kr-h]ME9[s"B3FKG_IGH.mEO7"0Tm6>jjo\EI%lGX!iBdS5>Y]kSpI9NZ5N^#bQYEZ/YgTlG&]2(i_AA<Su
%n`jZ:05S6RhEWltq[[qQ%\*d9YGtG-V;b-&IHURb4ckp>n)fW[NVhJLX06^]h@'>iLr-ciF*)[lRsXl&\-C3r.oHYN)^iq%K<;hj
%-S1rXmbc-YkO*dkW.^p4iUkud9-OKAE%QU:AY4*nX'#E7XqI0N<r>.[eXcR1dRisP%-3>uYf,GSIdlQp0^7?In^9mDX'C*N6K2l*
%b";TcZR<qMokjRII7r'pgoj<IPPpJpc,rs0Mt?U*>,Z44`1(mbj42h?F84h`&cVG9\GG//o?N?M3W/O%#gNd<*IIVOK\sE?,u<FH
%?_V_KEs0`1G`.$%6:N+Jaj**GS$KKX]!inhAfnmnbeq3H!4H,Da*[^qs*=^RI+i$k>C/@Yp2Z?K/T,"GX'!Qg*&IbGgHS!n)H@Z(
%P0Hf.A[d]o*kdYB/1hoZ@(hW"6*0GceV7'E;[_Qnl\#>a+MqV&l]:]u(cuaD?u/TBR:@N'"Z=1nhqp"NVr,ShZ,%D(DdWqXd3s\N
%\NqXBDt#igNQ0!;HF7i+Nnbl8<rTWT"BrlDK2MNuoQJ^cooi"$`R^`NPhjYo-_;U'lf"UPqPXSqMom)1.%1=NkSm&4cL`0+.sVF_
%7TDpR;[!05pFOF7a4Lh","W-PO=J[AQW7pVc,eno9<*X61^cKp**09Yd0e-+Ih)iCC+E.dZ;s@f+&80YO1=gZ['VYI`&Fs_KJOgM
%-"P\EXc[:J7)Q*.TTC/Sa$b!iZBEG7foPZ]lB<.AA-k7%R\AhF,"%&h3-Y]5d=6f`Y(t6*&W3."M?RN,qJfNFfH)=aR8JdfJ?uFP
%W"I%p*mtnR#g9d3gS"$1l+9EVW/6t"3%3jD8(8Q@)m+KEL4bjuZDEe"Efa'@5*m6/EmX"b]Ue-.\3*#*UmL6uBrhZho[.n\]j7[r
%Iaq?ShD7[7b+=6/q-oM`K$>u&=3DVT?T\E(pfX@bUZG6W4f^k#ltU0Ak7fnm?5,*rWq0\.]l;[h\\GC]*8YqErT_W@X_O2@7j\a-
%*\lEGgTc[3OrGW_XHTQQ#;KSKH/N$mgD"kJ7(r?/TD&T8:q)t&GC,%6H$0!5q(51$*frbLet3l+p@?YBQ%/N&WtfPbo/+N/eW+#!
%Nn_1rm0@tgMoflfcqIlc>A.\'kic@60Zk/Shk,;@*GfR6L.5Q.0fIrIUTp2^eVahVB<Ct"Lcg8":QP'BS+f/AX!;7Aq7)o@pA2`i
%e[LkQ=$*O:TW(W74g><Z`J89nl"'[:3b[3"(49:]#A\CNQQLimq=>E)j-B2oHf3?>Y?TF60_ruf?-XB,:^R.RQ1Ljj<>$\>!cN)a
%L&@:hVd&79@V+r>\o7\9pjE?Vo&qk^:ZnZU`ss^lL7GQ[O"2<!C\nu6#b"?N$N5i(7!"R;(".Pm\0&^F*p#&@mlcsg]J(FU#(,q!
%magKP[p(BE7h8\OI).e9;]#sD_Ki_E"ct<(rd/,8%\M)^5ca$!%!q83``EQel\T_7TUB+>kftEpn^15oHr>5)Gq2Hf,rVUV<Uaf4
%81HbNHp2u>j`fQBkF5QI[Q2Je^16PSfDFRI]at(S.c'CQ(]!Zh%nLGf2CNFcV+BH#C-tchYYXS/Y,DIUce]u1'L$rXJ#feZl[7h&
%?I^>;=C8YQo%nMHHVZS-*,Ya6Dl_2a>b^h5+nt!lnZ,"U?:fVYnU1:qJIHtW3BK(kSt.__hnD0W_V\YTg:I3$A+d[5S^UN^?QZU.
%LY6=0=8NND%llb5(@N^WM*>c_nV9'e$dI%,#fBar<@\9RRccZmmfl9sY1'auUUjYOg9b2&NU2Q.O'h]iFUKSB`nIc.2o4Of]TJut
%[:eoPVt:/Tk$aHl]Y*2loC-_(_ZOG^F8<f8b>sC1g3Wkk'q,/W>?Nq"D4``=fuDah]@g;FO5#qhCZh8+0=d:5r``>)leAHTU[V^0
%KH<9Z%V9d,nAVFBlK<f\1(3WhAK7l\*VOS*fo3;tLh4e!mS<c*$BClm9Z![q8re#u=7X?-_S*k0=s7h!it!3ErHQ)das"S-N-2/q
%7',7YfLk#U42'-2qQuI4*gN$M<hFlP$?apV\65bIWSf,-i,[jn]prGTZaQQ_oIdj:[W375qM_3';B=Q75?-Y7og9[`5MrO`4L,X/
%aE).gTOY]gYs)o>5I`AlA+@TqqiI;cm9<q'%!Snhr`WViIr]_;Z21?%&?AO*";u=Nc:EYm0>/)rW:H<2=*VaEG0t1D@1M1sjb(Rh
%*Z5gSefLq4"S;PtPPptJ(S"Ql]b=4kO)Js/)RYY%o99+Jp/6=RPI!2gn$e41Q$Ze;PR=R"/6maJoklgmQ05>k-[QfB(d32IXJbs]
%M]9oPYEM%1>5>[3roBZg`4s#.2gM3>HFO#MZZdL-Q4GVVVe_VLh6$6<?`Pm*(H6<[^-4.Rd<@Q]SXb&X\B(s'YEfk2B%fDYrH5ZT
%=SM6+IDO5&G'R%QW,Jr]c^-R@<TBV3k5!OhnS%URmD`>IA%ff0<5N_3(\R[C;-$>dZ`dX_Eo"B4c5YWP]7m@P>ie`O5230K[p4P=
%I4]B=*k\F"%T:0@LR2\\j^I](HWWE+rS5fB`n)gIOj2ZrD3Z42[l.7p$bgj:hX#&Ahg4rTZlBfbXI"k6o=Mu:_bKGSDthKTVcu)F
%P8Gq[MbbG`Gu$U<g<)Gd_qbj0^i%K:g9]PEoDHS0O-[-+aDQR"<5.6ggNcUc`d>ILn+OUI1AUe?fugor1<(\'k+:A=I9\bFFU('D
%+S*@(m8%*C71,ja%fB(KqeYm'ip-LFo6p&fjN`_f^HC?^lePJo2T6V^;L!lE]IJ=H^aMur't/-)_0k%jI8e3?S_.B#;tehTb&*d3
%*:N+.ZT`;.J]pi`*t"G$J;(#>7pkQ<Ec(%d1ts(?i'olDg/rjSGeI7Z)0br,&Ste0D*Qj`hVNYUjP^@0DEh;>2$n;grKjHr1&GCc
%EjbcaI$<rDHi]+a3pOb`(p@4qASg3)pYhYZ<NsX$)p_B`h0XM$c96Nt9!L[2q!<8T?`JEFM7tQncp,%OLnq9ian<uHG&59T>;9%L
%5'UE668Hf4>03Dm0/%QsT:>/#>buV-U:OWX6UBb_k?BGYo$<o0Y=JbU^GoOPCpW`P_J8N&VOl5fMkC>N<lDmBma7n6B\9[2j]<4D
%Uf$7C*XpE9,8@64r3P4K>@#EcIAq;_[]j2I:LW6uB8%<!QPfM.0<p2N@0N'k@50rh,KkghTDOQ@U]]nP31ohtgr;Z&J[nf`go]_O
%b7Dp;(%R.Wa+]5%"`iaJE3Whh^9aP&WD"PYd#mQ]>E_)1psrIUI\(AW05'bHBa.H&lsS'7"/'J"]drL$<R+e'I(?rC3r=^7KdCn^
%-!`uUkoJ"N/E5d#".D7,gZ8+S:T09p6#lX5#p&>E\bbF(I<)GVL/+o*XsH/?Yp[%GgdZNa)]C\C4RXB\HpG_^@HXBnHumhpiOAOg
%++XSRDNfpO2IFGCIQi*t\K58;7q/H(\:8EgJ8&OGJ>]YLTe4d%^am,sgPY"TbG8((#Zj.NKsdbHI9c_W4l.TX(D`Y1Gk#JpIXUbF
%(4K+(j7]Qo/q$>EDI.-[Dn9:b#1UYVL0BIs^7f.FS*Repp>Y!aGMIJcHS#f@RGY-4>G/nmX6:65Y:?:9H%3XLC_[qkXrhNJQhG=i
%T6"j_\6aT[\:%D-ZJ:-MY+#^ijNd(Pg]$BlS"%q5GP^OicldW3r!c>D3L5uX<E6F&YaHPQ;8Jcp_H]:8rtR*Uh<-LaqPAK3:#SjF
%&StXA9lNS;+cj2%KMl)t6(DPr/"9n[*,ah]9/#e.g&0=<`<,Jsm`N5I>fEn0`O+I8Z[5%uh:JgclY#!&$b(D^K\X&$HZB(mL_>$7
%=ClL2r3Xp2G2MbipKJMC[M2M<T78of'L%$+<TGtm9GMdgkGF$NAlK2Jn8Q@i_,rCohLiCaZ^<tle$p^Xce8m;Vj6U@XI8XWV$iZQ
%epV3(dt;/ci-Na52s.fB#tBO.kH):>lQ1EO$ltD!]@1M)Ad$b4]De:Zf"F"$o?X"Wr0e/I5M]",g1Le8p3?`cabLV9H?O6TD-:R<
%IJ1GWHh*tOgA\TefXMlj,ki-#'2:OtLS1b.Q7lNWE+rtJSU9p9qs5U&3e(Sq.7]OPP$hQB7jtsEe5Fc$9f#,JU0EuQf=r)ALDu6'
%rDohf$mc8NQ$Gmqig,(Z^L(:r3pYpOYl4!;G8j[MLGT>'(tS\+!S*I-F-j3l0lXECL"IVips(nqr+)Xcn)S/ko`^^+GF.oT>&GE=
%lH-`aX0qV3A[<ZIUKH[_aLgKX8L[8-8_!Xsk,*R1Yd.P<c!SCWVu$,JQ5X?mHnTP2otA]2dFW_H&T:Li#"O"2meYf6d`9TO:n1U^
%SR!-e:rja$;"FV7r7RRt#aX;A-Tc6B)kT]0L<F8Gd&WBCdP<;^p^e_IEoE<t^3K2cCnermYb-@"N;NK*(>Ho1lf.#7Ba'ghbGE&W
%>6OEk`R.T_l&BbZ(V,+N;nVsQSg,OY=P.[q#?BV0gj+*@bFdBN5+k/>hnZ^ar0o<nPYZH`fuBrFZZl0!":O/MqVCOJkN4/di/)a=
%R7g?-$E$P#<YGps'qK0mHh;QqQHrbOQ\E&]V,,A.XeR%_EqQW<'hi'saF>bU]bR$?:_]upoj@)VoI$0r(LS*K([g]B'V:u3$2l4?
%TO-O$k+=iIA]L:CZu9k!c^%2eeN?m:lHMCMqkn,HXX=22+.\D!:Wo<aad-uTSnSMDn<IS/jiGtn5p>NdXN4YjX_k.fI(ALkG#)6>
%j2FN[40ED$kh8:>*0stUQIg]GKSd9G\?iNnLbc0>2stpXb9=gQnqB&+If#.DhcS`?\ZD(ogYTp8-M7$=hUo<Z[`UPchq`a#^\B[)
%gg7.Gb-u;*h.PY!<,[@EnFCB#_lX<jr4baOLSncFSt!tEd".ol-;SP&k`eV`G.'J0n@7U>]$_o[GI6\%^4ou&0<l@:"LVT7A@Zk`
%Bsk:df^h?(\F4>&.YA8.a%uOmSe9ecg-nsl1NH@Sg%4G&Rq([rO8/k6%9&Ui]'f`[=4mOb]4:kFYhuFebDf,UlT2#h7\JimQ/_l9
%1j_tQj`WH(Or**9J_tW6]NRN>Q/2P\1^<VpIFgjV$i&46:=.n'kNXM\qsV:%7fG.#&,sah46(S\^QGc5\9IZ@?]/KDnqU+8pM)P$
%5Y/Yf`Equp@D]X6aD!J+U!1^D`lGf[gf)6KYKAH0hD]`ArNH>06l_-6^]-&E3W/3fpV6ani.hF0.r/:ZlT%LTQ8-DaHL[ct#g7d-
%aL\7hRD9?)CRAGjNK5CI!'sULn@,=bkmP;@B:+h7cb09kA4h?hQUcQ*Khm]V6]Y58Uec@4M>jdIfE_B2q7sg?F2>W8l1W<$X2#0]
%^NNH\<`aA;O66Gtg,HcEN^#2JKmeW`OMM`XZt4A[h`'pXNt&%:/&9UfDgntm1Ng71HF"ADPGM`,BQdg.?eF/KlVuu.?Rg8'X/l.G
%8^QScJXq',]0&\uZZi,0f#i53bDVCA2`nBrC/g.-O_ako)uNlVYb)n5f"K#6>H-,1=5V3kb@jfG`_=S"DguM8@LiVb(>_`6I-KZM
%LOR^UL:=-/Wp$HD<p5BI.oh159[e)bS.olpV-nRIqYMq.=hL)Ho:"`F#GlaL&ILYP',KaRd2^4#$l!O[L;Un>T&>Xl_?[tt>g)L*
%!QC[JYcQ#5#qoM;$Y</C`F*oqVWmT/AJeQ&TZj^\c)g<d)=H/)0Apq-bKDrDm6j4_bqdoDijFFNfbP9[JUeZ*H^UfVe$H?WWLD8M
%@%"5T)AoA=<RX<;nX%0KpL5L=ESe,STYaphZDj<26`d(g2>Z;Pe`EohE=pN+![^>%04$3abR2X@hn!1h]6uJdEEE^2gL,rX>9AY-
%<_".U"fi$OGVJ5tqoO?oVb7)e=`g\5mp:$;Agcqr^2))OY<a=ba)T(dS/]8QnA06`bJUnB[(-/:Wf>T(c-R6B&$R,5X'Q1PF0gTT
%/R1.A<fLPIMKJC.=O2p,*@E?g".(-_l9.dNKZI?$DNNbh/E<6D`sXsZCr;K&K=b.g+GT::E`mA5jp5D(aV!NC/\tFID@+/m=TS.;
%QKJT-+bg0N6\@"dScXS]+t#+\@%f9k@iUF]Y]ZB$^sLF@2mY29DMG\EK04l]gkA`8rPG;aYd3%@>_(N\$lM;j/n0T')^Ye-i^#d7
%AD%#M,3p?P<0j3`7$59%j@!m)S-C,;gpAU4RF!hZ8e;XOe#aNbQ%U&(f`2)[,QWp61P3-6jiTJuPF9!-N//^P/dXs6O_WSkbVdU$
%F(#bfNWRE.l>;HjbCgbY$\RjKZS9kR!m*dR1&%bC0.Uk$%-sf1#3uZ9V-jfq0Xf']L<2PW)Q4ni:_m^_HeLs_5^Jl^0q!UA`6BP\
%H7%!RfeK--6j%WH/%VUo1,-BO-gC[57+(Wf*b['f.?5]="JiQg3tE)=!H;_/1L5oaWYB]%XooZY8m&X_O=%i\G%"EVe:X?j(tc2d
%f$ej^Xs;\B$m:q2OKoaj>/Fl**"9h(8jKRR=Ab$(e0ljhOS6To[KX&E1BU8hRO@5c:;iF9J^lp0<q?hPSr+`=nh_R8[pr:ieJnc!
%#\$W4k9sAQ\8%<3V\60Ue1uT7!T\f5UR4mqXos$)Ak"ej*-A>lj0HSj.6Pt:5V`s\B5Oj[J3BSR2AO3I[r#lGi>>cUbm)H%/8]!M
%gb=[H1\P73CNH7_7GIH.BnsJR,SL?g2'XOUbMBI\&"skrlkis:65hAOM2WTj)Pd?a\1.O`Y^lqoaM@;5V?n#kV^)`X$\1K*>XC""
%2)6Bf#Xb88+?^!i\Jg(m_dWiGU`l<dF\H=RM+4+Fh8@q^Op,iE&-;pK%<7adLd5j25TA*UO=)3),K'V^U*57=$X-s..#ME<YTV5o
%XdL4lc^BLdYGYnhP6I*C9atVYU0QM/.7p3U;cLXaL6\PA_AF1(LcP[dJB9AL0i7A^2*lXUfk/?'jY1/05]Hei(3C6+FCB;'RY>%S
%1N*<=['GWO`aRhOcs)Sm+[dGoB"fFW#_<aoPrRTSKV48=EfN74XNHZH":IO+,PM>cOi_a(VWGn!?qJJ^22+JITRnBR8MoXc_luQK
%N(ceiW(^%!VM.;>3><5YG:I8,\S;sI*=s+tYi7\t'25L-Rt6J"f2/h\*6(^Y*WuQo6Y;!]U\)@*R*BS!0gVh<pB.N:0Yfgk;&B`"
%5THLJEhfB\ACEhs"S<ZDRRLZlPe-orTfE+Oje+>9g;&H7C!i.`_GsNL3hVLIZ9Wka9ZRf(/Dqe6p:WgK&dAI7_$L^.>;6VH/PSZP
%%tCAl)8cXGZq5eX#,;\15Z3c\Jd36jcNhm82D.8E;.r#CTPe^>?nepai=M5H.'l3j>@9WGPB[:U$[]l5OLLn7!=EEKa>!q;4^b$N
%ha%8qUDe(\+Yjf)N'J&=g-KVb^agWX>%n$hQ"B*/jtRRW[p,+3irFIdlP>/9$/@uC-+JXK9i)DXciFi^TIRa?!\QeCO$$p7p6W\U
%TWpu0`;gq?$$$0"KsLK`'LG+P^pq0u8nN*u]$)K2@DFId-cZMX[p^VfW96-"'WB2K>E0Ul7E"7hJtN@T-NPt2kh*?i,/Z]j14=I.
%PXFGr&#^9f/K_47/R)@ASnhF7b=@#si;gIm7L+&`Qu@`/1Y`(jOs\Cm6.j*/W#uZ=49Km5U&dDSKF(nVT\u,%%Y3(U@9jVFRan%o
%3(S=TdWucVZ@SR^BnT7(jT_$>$_:f\fgu0OY`Nl'1%[..Zo&_W.,\%gdj*@0l\J]r0[)bDKN0`?-cVg)jW(*Rg11UlO$RTC$Nid"
%Vt"dn6Y:X+pMG^^^1\\?[YV]>\[e+Y(->O`.&RNBBP@KnK46*6S(]K?CnOB@3Prr,N<P.BRNSaQ<`D+$E8`RrUM[lZ7tr]`n!Kd3
%d&cjZYdc5@NR;Qa5\!ni8P^;9`?CnjjarKs9NX+raS`hD0Jk\&EtKn:A?1u(j(4quAp`[DN7[8J"CHjn.6_tBRH3+S^*?2OU;eF,
%PeJ__-Q#EqL]nZ=1m4d`"hK.*=$^Ycf]?daP(d_'b!fA3LQZZJ1-g1B2'/]>Kg6:c'K=O)5q<"53=Qr&@kLmrclK20X:ETUA<WD=
%/UM.O$ac[6XM;@d5DBX71<<p$JaP2]ilJAn^R8nF(f5/g:l9m^?m@=VohB2XOiB)',M<h0,dd7kQf9\C'7o7VF!8(.Zo>K&*mnku
%Z%1%G5f"*P(k?XCd>1-HD&HkE(f*,S@)]W(K4PT[Y4S;4L9`'W2$9qr5<<Vb=r[lb$8>Rf*"s/#K-E(TZlC"idZ>D3]cSLq)Tq+C
%ZN[3k/oF_s3ZH*Mbu5%VU0VOBBs3+OBot^`+-C9t(E+[u%bM+1d,n$f93W>+BLN;C[t?8?-sIWT'$Q[0"R&ljRY`@/b\5aXA5m&?
%[=o*b_i_AQopPm'=$\i>!+gD%ACkbA;USJEQu,JATom^3-%Iap6(CB?65]#TE`?7pCB0Df0a4m_.GIc$VQ5gr%[kP_[KLpS1`D*j
%4CGQY'&Z?nSR\U#Q3*GO@(()W$k8;N.[9OYAh$`UKQP9I`mjX"Y)o#'ASQ`$9:6]1(_TEO?D_nF^bZc6+M=qC`tV4U7DU/N(dnQ0
%**3/7bo<f(=,rT$9i2-UL)^EOP?sUr6gdjcM@U_eA11MR1(\ZNNCCI:.Ar"BOY%IE@!2sE"?6`2@K9EN<%aV[$UIrO"V@7.8=i2!
%U'no&1?YCnA@i1V;)L&&[K`[5k'Aos7\sLcN@obA`W/G19(GH-jJZdR!A(B.'_h1Fe<R7$$$/M9:Rm/<"*!C:&i;jF"di%X,7/C5
%\aoTj382AMO"#TlW_ssH9Ke/9,"30i,TrUgY#Z(K>[,)sM'PG1#]LKn<<,t""8'8I"gaFLDX(tQ/cdl.+`kbj/P>oY2&1%5K]FPD
%KG<I`J9A"14Re#mGn``jq3.Z%1ZW;eF&rEJ/Wt');ZqcQ+<SB=Kqq's;G84Kf&BJli]:tojfT?rCCh@+C=1o'Oo9nQo"g23dRC;F
%7Koe.a#%=?946[!D'2sX/h%iY?ZpoA<J2T2/'3kN,7Ug9-O:BK`sf'k8>uU@R$p]E1Hj@DJ3e/mL64TQE`Geb(j/i'`'eZABiJ0_
%Kp)V6@=!7r<*S0'[!/VYqc>*V",eYOK:s2t:Dc,RLOrT"',:%C_mm'.j>\@!O8u.*d;[URg1gVP<i<H\*e!#@d0Nr@Y7\:)!chIC
%fXP,D3&R_Z+g"q:TN@dpVF7^VJ1UeY&\;9sq;7T.>7DDT2&(mIAc4XsL1@Y>@@"q)oYbL082dh[Z'JG`T%QV.D>h,9!p<mgW_#^M
%TqiAZ[QTjKiaBB%?JssTBRq\NKG8bm^d_R)!5Qtpc-lGaW"fEgL"I<oS^pAmeOS5/rVO0,=l9K=%!L=O$BaCWpLm7YKH[NkkJJT]
%Xf@=9=2A]!/F5>/$@#VS\2I?,_aGq];d$qACB:D.`pLc*=tO`.^/;+(O^Y9?XDAJZd:bDXM>pk-l8JjPBQMRui"P=&(!OMp,mKsW
%gG]:RDkb.#qtu94aj!AMU9Xi19hoA7:mM4'(Bahfg@%>lKT<;f`s7l_,HWT3#EBJdi3!0>,m2^QM)U3q!\d143>q1J:!j/eUDuef
%@#cHcZA]P*mM)<'-YVrjb\J#=>X;Rt0',D"MTHlU6/!)#"JNBdR"T'=G9j(X$W<XWK>6.BRbO"EKI(%:o=2`E4^#pM/1)OM\\;lg
%/j\-Y^i1.-/23FsM^guJCV["_KOYi7NDWJg+A6e#V#UNU9<t5X\1Vb6#0;W`l8HqLnFR3aBe`6bFW?Pf0QJejQ&5;G^!f.r,AM39
%[t;F%F!j*2`A.9"F)N:9fhD"C@:?_O!Ze"@H^f\C9SsD%YR'67G"eQ5.cqtO.S#V=#mnMf(4n6,!"Nmm:asjn&?b`t&SU)4).mH*
%[ZGgg_B>b9QBtEc+K&qMXIu;`#H/1:'S8@QlO,fh,uqKC&CY-pTWLq-1sdXL#/q%3#XVA-':.`^&n!`*SG#X-P;%fCI<%&R"38CB
%S@ZsbT0]JHg_-rUh188M)LRjg0(@UY"Z.pp#(Wq<?#%buQ@ua`/cp^QP/E,aS84iR4b6ud0+_Lt21\"eVK\W@L+t>>_SORqZZ/LQ
%Om-1#odiD`Z3I5?2W4sQ'jtLa8(7E&.T%$m%n@3WJo,a@]G>Up&gk+J8<],L6uUXQ%Nri6;edRSYr^$XLF/g(KRsOX(T[j3<c=\I
%6c$o!G7&P2U"d-u6Nr<3k,8gqAVm(1_sAC=a]F32>m>bSU+.k8Z8,fN-R7m7Z6m-BdmN(BR:@,=7bEC?)p*G2;It*Ug;AHg`j?K_
%Ord$K`Y(m@\-=;dEt)j;\13CFlkP8T).Cl:LWirNFgQaoD%;\.")W^C6=;oFN]"kV7#3:W/?BT@O?106>R@ZgbQt$<>TnBJ>Ggbb
%-$t??#*fF.*1-F'f/YW37;,9t"67tW`5]X3r>R994#00il+`s&<,SNp$57<@#a.IjT<tt<B=Q%S[Ym4gde44Zi!LW@n[Pr=#7ptn
%g!o#d"U]5P1,gG+H;'X/dDR>nLX%R,*LQ/&frcsj:`$oN[AY'9@ZU/jJ`\VP)@Eh/&;'/@Z5e+Y3,&Y?EJ7if"S49[^WTQ%hP13:
%bjVc1:RCZd-_G'!SjKWBoU#_]O=L\c`b!Y'[CIeMj3Ps*D\]T:8j,Yp3@H:G#M#X=Al07Kma@;(-2%Kp!1>0b\1&Yuq.69%XRrQ7
%kW[WSAc>m2&+(GcNWf97nNmaf83;BC):`tOcP0o363BPD+Uo,)?os_WjUFZ&a`p&qND"=56emDF9am,<dZ"g&4Ch;]W,aFo-7rDU
%k(M/9U#BLm9Z9\Y6XpV?R<09rCFpF:FVLn:-A/@,cl#_ob`sLio?9l]I7"kmo.XSC7a%_ELBu7op!T?S!.eloDF'/T"PCEe3WHj=
%ScG<)]73TU+$ND,d#K43dMY#?ONQ,Jq?Xjn\ti%-^XJXEP;k%?"\^p/-(n[;@0]%*c#WA4_'bF3cnV]?"Rk00^of.W#scNd_%N7F
%!D%BtOD4c1F*0GT]N(/+PU._D!`O4ieHBAlVC=)UP<:W39_NFdbf)pN#bkUM[+md&WrRf7jC2QQ64LNN/5$e$*%hI:X=]?FkL,lA
%jIn$FCU)8G!slp]m\7j/+O;-\R%I.GGX@9Ucc/BB*XYF%HA4&(rL7>jP=>]/(m)'"9=CW%`:1"]?VjJ%#fH^")g7TbVF=lZrn3;X
%A4j1b$$<H51N9]08ntc.lrJ\"GDp?n-`f;hn=g60-oK"dFoJ_?&.LGB5=-#ck^=o(Pa"baJn6s_2=4SW'.t]@+8e/R-sXuN5g.*c
%PQc/g*"S83UoBA8S-#GqGS7kmM17X'g1]_Y3]h5o;5PV0!HP.GE1&"!m[3!_`A42J\3]r,I4,tu'Bj\4/cM\9rQEZBB,U2,%AlZW
%/s?K#`k>VUk"Q33U]bK*0>S"W"LK/$8K\9=4DRB"Q`f%o_m$1oP7%J0d_6RcNMD-oQr7>)OpM1B3OK-'W^7BFb+T@/TJOW)*SiJi
%0+TcX7tnV&,S_0!F7B)F8?9FQj:&X,i87,\K[I4VkM$,n@,l\H3$T9ha&EA(^#?^AEc)_#7Bb7XpiEsA9kfm6G8>pTWo6.>/YT&:
%6DiO*h["Ll@u`W?XNA)^F:p-k]9G3'>aumeB)\*tNsSS_d4&"`WOBTp8+He=([eNUWcVo5:N*.X'GA52f2G7R_^%e?Ye*4ZCK[f`
%lYY0!/h",[9bDT&3@q6qL+'njHsdnW<k^.6=pHm2kbTuu\8X3O#&e0WA4ef_ce"l[UkAq),XYsc\Ec\aJbGdpU#XB;Os+5taQS89
%Bu@<hEP$jt&%$,*Wu)@=W4c)hJL^kDbY_5!m_W#K`%dZMDo4A(Ef',P&4kSG.GB)d*j`7GY$b#$,9u!8d*.=\'80iOfGAWEp#^d?
%-m7Y0le3bRQ7tI#"&1oR]'KKBGd9Mc2A$eGi(]K7S/f95Zc#W[P[Gu?&^N\?I:+#Cr"6q&P=,jAW^tjJ`?F_q#aF"hb`iu0)JElY
%dhh5&5bW^[[d>s!dQeQ_(QJ^2I=Y-!PWST;G/K%SPr/cc3G#tu!$**]D->Yk$pb&]#Lo+`er^<^:j_.,1fWcXGZD^#AHqQo6UIXT
%4&M8_(q1\+'h/YOHXX>r_'nnF_$Jt4,TuoJ7$?`rd!@u'>N`A$0._Bj;5OU[%`qa4i971XGt4a#TWKIE#lp=mL]C@%%%RbU/<s6#
%aRb1[4RjDk-1*,m(O0=aE0[$U$<^:dlb3.kbe9WWI^%R;OpLTb.Cl(03@X<f?V4$0Y*rEfT!qQNR9&67a[?E@'MN2-?;>TW-A4CD
%E8Yat5=.%o0ttiKG/L)ANhBZo%23#$1eTEs-Z)jA9]lCc.7?!T]s\(br0&uVlJs0EI0>c^:MJ'u$E0?uQ^e]kHJpVk+])cIa/)&I
%JH+K%$9H,bW[*H1c*fgPidh;Ue=L`B%Bkq%4S7'!k&ZSDg1KDf]8;1'I5ohD5rU6SH)S^_je'?5)o+:L2f;E;noDbScb(cGkcnUk
%#$J4@(W/f>WGP!KFZ`_EXI)('f\T&F/.m_5.2darWZ7NIa,rlV<-A9C*F!Bg$f%51+C'b&KXdnUpO#7rE=)8Ns,*=#Q@s2m!u,;d
%RSiR?J0$!S#s<]oSHld^,@StU7:S0jJ#CQA2'CH,^gl2aZhKZI1D]k!FFo@-d6Lsh[Umh1/$PV!/+89];,0,NiRq=7%_n7r665i0
%GgoaH2XiF&RVGPPh!l\i/S+8e?>/;t0EU@5GK]<S61WaVGX<]ngJQMl`(YBYIc4%`?Po;N2-uQj?Wo:HgMJ+4o)Z?G.7qN=M_Z/d
%<Kh2sSfWVGA6,T5DM';g%r%Uh6Y]R?4kra=JQrYVc.(Z:;0fj,cKfRh.S8cnUUoNc6NYUbWH9/n-q\Y]-CQuubcgInFgcbAe@FF0
%h5@c+5+F1I1G-Y@KKfukRc/lDQqQ%D5bDSEP`7'G1!G4cI*m`%0fKg<L1dO!+WdL;_kamV:cU3f/T)"C&&s^IDo4=u!['08U-'\1
%F+jlGOXi4Q4LEuso)'N_PhU\R4BfcZTtjTRMk83f!cLuVboKOuedSmYjX-[RVdV#Zi7]rLmU04lNZi)/cuGL6;"Yn`DK6@8)Y.'q
%&>HHi)'q>_LBmES/X<+XbMq&<S.Z<SrGb@f5U"LOR5&i$$HQ1)WNP*tF"gkeO31dBLl,'NrbA*`7nBr&Z6AJDq?W`TOVft2bf*dr
%FQA-q\\lTEb!NGV>raF$9+WuD2FTO*"<YR]$t6^`R`2"]C/.G6WHgBfUkbg=]IYD\i.Xp7oar<9A-e.#7NA@/6WYA77eb&f9A.,B
%8OK'dcY<O&cllpT0nck+Y`"\&fE@Y3i:p9@RUA7#6!*l8AW]J>e&_A18;uO>(oK>'2!'94>sF@#AE]-D'dUV8)Q5VjAL$KG+mi_:
%EC_?,]#RP!BJfXDWN.@riHX@A'LlOoA%WG7B:Q$>nYB]EN'9[A0gEpA=0DYp7A=/raV)E(Xh*q64@0W!+3TbBia\s%MTT\FU\\J^
%BIpd99TJ65QVuZ>MPfk.m4]2`noDX#@u,n`/A/&Y8'!iR]-p!a@lO[!%H=(l+rlRkDo5t-qjK3=p5KriFA)f?+(ETWaiLM=IXtf4
%L:G[JU4%fsZo0=pR"?D@0aQ6A0tSJ/&>!CQmb2p4&X,(84PcqI"bnm>\^=sJM>N0Pg.[B]HFTYbbMk[eO4rIdA[Au>)_DK$U9q9P
%Y"s`ObiU()IQ%^q_klGRp_?(7'l@N,<Jg%@6j-^H2EW+!fKs/dj#);pPC2Sg6G,Ph;\0NbkUm0&9eFid&1FXlgbHk9BW>DSKZ2%>
%iX*$+/l:pa!G\(+b-f9K*$mj%3iIR%OF'T2bEQ-?0<fC@KJoZGh`j64LFSM/A98Cc\e'+=8:575j#>V"r110KpR!W\4;a!^6X8>f
%d6N:kCk3]o!'qTuk>pe'A.PI,VTOJ*/1lOBL<B8MFKP]Qb,ZcWK,`p=E]G::Vj-4M#fDpAFp8cR0SE)GV$Omk*M*(M/=@8CDQPtp
%CWN;`#HohEgOG0*HR[nao/GkaYY'hX9USgSjoDa;S1nNmiXoZD@P!F)jr%I"P8qN7F8&nanSeRdo;*N&Qn8tS)-u$OUOi.q@BKk2
%M-Q8/ar@iUJ:!S.2%=4/MiN:=T_9dre.T9S\<R6+OX[LmmZaZO4Bn7/GX0*,LO53?(k._Wh&,105En,']?Z]""V,d@,S>a^*icKQ
%KbdXTqFIAufHEXRLeQ&`p6WmTo'/>9M?hHCdZ&G[,qrR4-kd(Z=E$u:<d6EV0U1N!`j`T__R$$@FAWuT3E)b53]:KZS4@;1BX$Kn
%'jX4:cn*SP&Y?XP_X_5'O#s&.F=g-$oM?,kZ,g49/W&ct07RK/X9o(KfCr5]_IfeeQ9mA:FkjnL;D`akMJ.m!o<:Y^4(9PCLa(/W
%lF[c[D7X),m]aOF/[k3]kodQ('0+DG@?**3l!?K`WP`ea9<&JR@;S\4#']/[>.DaK&3;o%1]:fGDN[\2q[F]:RE"/oJrpr5=stMj
%_0bIs&LQ!O`,[CD`C9eiKG7ugd@q:j&K76W0W]M!+[i`:$ALf8ftC6_-8:NBkG29\&/@-)*K-VF'WJ+DBcNStQJ.-5S_St_q,k32
%?WYZ63kLB_pP6'/SFPAMDP3?5bV]'J)`*i9QH\^ojf:NJa1MLV%pWC[JlgskPs">4*&$#+dPk?T#)-^a<"r=:W]_5+`e/S(7BUXZ
%m[K/Wg3VqIicVd&l7)e1ZjP#W6W_:8C"ne/FnM")(j\UQ%/4C>"e`<>`A+>ZDKu%.?N"VS(gS2@.25GVn3.lJ)jXo5"K55F%sdE"
%.lSb7G[shVi#-jIfV22!QL_Nq^]P"?`Lae0(K::Z[)&eQ%1Q-UH*30/>I6,&)Yu@"=5N%Oimm(t,#hk%@H)Slp#+kaV[cYWZS5<q
%]"\D":Z"(S>WH`9e,)%_pBs0g/MHm2R.+o`[l<*c%/7'hmPa;5:L>.IVEG>EZ&q?(gu:bgZl)LH]a:""8X;4noStL:&Fi5#Mma?<
%?I"E)L'4@/B,RFf;).M_DdoFNgA0A4(GbG!mt&H"5!l)9$nCh"As7,0B=-u50TBi+3Or_@nHpD*Hnr9rQXWm$Ht1k8H-R`S!k-<@
%YmaoTR%n*<NT67+Bc<!oh[<7AL8aP7ll)0H_$@VhS=\XML.Oi_R.cmjO-p1,VV;bYoY.iB:N9`%I&)SLF>j<LmA!!\L<,;"C&'fe
%>'G5[VP>qL*4=tu`R8D1QM'*1/aG"!X?F-'fX&Ih#"N#3N%kk*=rNc1h0VAo]!4i>>aooG4X[mW(RMd-R@lMo[YArYo=]WnRAY&U
%J&0kI3RMh63H&<ThU4Jecm='pJD"rI)>2Z=/M2U/[%KOmBA8[#$9WeLVVC#6(S"".kn3B?`Du'IBj`=;dt)FeoR^](<G.,S5r7NR
%FE2<9IDok/5r!/p!C9=m%G*T%a1-4cV+E*n_NYiQgSS6NQ@ZN8+eR2k.`g0LYSaH>*$Mttf#D*VKjdXk6U(:\K4W59ZPFV+V[Gkk
%@3H-iJtn[/bES@`6>.2V9==pT%:23/bWJ#3c)$Bc,q)b=oD5a4V4L6p@PGAJ<@/'?p^Dq2dagRZ.&9GdI7RTi(GA)qI&Vbh3:S%(
%;ZSIm&/(fgE3^1u-p8t['(_[(XgEb>q44\R!`sSP_o1SI+IC2m/l$OX53Lt#s$lfK[O\\_l+I<hG)W:M`&6V+dq&pXi$D^,%Mgo/
%8"1.2,VHu9*(\Q:*>j%Y0]D#6n?/8b_c:d<3EjWg(d&q#JcTWo/`OAS,[gsWB]XeJ'F;ZA8b%QU#QikF\fC06_ul4!b>j3;7n`^I
%q!%peA2Z5a28bs7AUGB7_IF[Q,SY1,\)k[lG[Cs:amA"NPu>C-Sl23f_i8M+?8IP(/+@4*5UeZ88[-UcV;%VJ40-YORCEpiR#XQ<
%%nfr=]:(f$b4A\2gdK2r41l%C'-8XO_L^PW&22X4e`':'N2@!SQ5"ND-Se1e,$n->fSaj9S8^F(mH*H'X60E>F5JAp%*I*q8/-XN
%g,']dMFNq`ThhIP=NV&9&:E'FP\7a@5_aIgKD^_o,5qfH4P$G8'dXg/gih\5*o8o/[qA+Z`B^\?,A>`CW4J(F?=Ka[U6L7SY:SA@
%)@D60[Y.Hj<_c2\NJD[eOSDY>d>3AN_DAI.0Hn'?9+%JLK%!asM!+:FJ[2]iPSa]J)`$*YYdTXF?;e8L]s.T3Ua%Mfhrpt,d[qrG
%SlB>G'X.:$d>0G"3KeV1Y?b0C3&+6,8n2b$D&XYX`NghKf+rpZZUH;p1_fD1FARsOe_0`)!N`e5],F*/V>D(g`CSIcohmk&"Ht%6
%K"GFnN]AI3.qkeVYK-8BgT[:KiNN[,D1!>hR6*4WHR>se]$hT^niALQcN]$g<O;eRW3keX%_RRR/.6'glakG*F7<E=^/[XHUQbNW
%PDc,WMbogBMqS]m$Q=e6=Q4K^4lHQVO%!9&%V8&gMANWlHD&]`Tj&a4aeJ3"adNuO76r;UjQ44:EYL''hqs=`R$Kjfe;)2[&\BV!
%rV%suVGZ9EdpdkM6S9r3M<+<U#\UM!C$LHS\j+9W2"']RBcd-9<d;J4"M3fT;ViiDgqm$:/e=:W[OPHK)PR;W%.E\CTi%=+;,n#k
%/ZOC0-tIEC<YZHiBW]3V<"Ke4<ZMRq_Tmp:Fji=4O_LQW^DWHZG?SrlrY(FYj=/sC[<rk06O5#3Y$Zj6>:j:l(dT3KTGXi0&<p;6
%0gr]7A(AOae8A_11OOqsF@7H^*F<@%PO0hr@Nic',;R.$HKb;df5_d.kWceGdD<h:q6)@2`5WGb-8&6U2EH[*2S5'sIsUr#g?oLD
%&/[d,b&ZSoHlcU$LG)3?dsuQ;5:4u:orsj@0iGZ/S?fe=+Fs%QBn%.s(7,%FKL3'`<V(/M$M*W^[$E$cp<+m\-9YZ]T:NtI(Ird]
%o^4-@C?M>d!'^Z4L)@hEO9^"o*^T"@4M$J?83`?UY4Oh-F6'b=_^f?`ThU/Gq?0TQTk8;p$[2[H4gsEh$CH[9HM>^H(*VCTGY][k
%Te0>7Npo<(ku\S`fbtNf(EL(C(H3DNcSb7W8dsB=D_Mu`6/22(0&;nQ>9BGaDARjt^-RX3CGA(CK[:HX-LIY)qb5<r;Hes/:I5n_
%<JsZs'3,K8<gP2ZkTNEZ&mYNQ$+2QV2r[\$*nDI\S]B5eEnh6pmuZOf(llT;='`7EiYbP8P4M(cL$eQ(]tJO0<kk4VfCQ(Vp$\N#
%ee<6c*(+(QN_)I"V<7(/b:,Rg+c^:L+^A<aN&b^_#1@+`V)PeU3^YGAl<+*LMf2&gj_a2u:,=/a]Xo(*FF&e,Cc')[$$Dh#8V9:^
%]5`)J#CT:CHZ6-92X,GQTOBs=hQC=rguGC-$X4f.fqpfcJ3_F]5^]2XWE:L2qe@J67o)B?*\nk(kBPLK?HD1'^c(b]!n-3%$59b1
%,g`3"hA+D1]-6]V"BT*mSqPnWFS+g('<g&q-"[3l(pZn,*t?9"2n?lFZpdtB/oaHE?8eX1k_)QcAEoc)llNaFCQ!Hrh5t7/6.^":
%Z2k=>2[Ai(DOkP`h'.o`.s'AZ*d>*T1uWR0W`NdlH?aG>-\3$f1I>=^64=/4N\77_MDt&dGVp<.-(@%(1cu5SkfI4kd;'#3'ZAK4
%`l$M(7o,ir3j[4a)g!I?!cfs4o^E/jTr3EO@Q25_*i4jHpj<?Ij_2rU\YBr-&0fGiok,u&jE3=Vh.1!C1HH]+QET)DM83mg\:j@U
%$!6eZKLDO^(8^K#hAWCD1F-3g8O>"4RX6phiTqM06)cq-j=B"/9A:UdW8\k8@j&_M+WBWSgXahgd8hd*MjkUlk_?,BJW9r/r(KFj
%C(S6=`8tEE>\G7'(a1G8<ec2S?:'GphbglIe)#n)?#aCPd\84oNqa6KCEW%:,p@jjLoV]-iY+uK->`M'%miYii<nS#&7R*Z;3Yhd
%[8cKqf7RYUL_0K&MSA*saY%F.idR%@[lYcVNZ_7R2M6=ld%IK^-:Xt1RGJj6/<?uecu$?+)UmpV@9jI9[98`o5m(iic-!sSdhdGO
%)V#s6BOU'j`#)dk\fOb!1%L?kbn':e]-?^P-$qeXaSV'jroqKc*<mU/?0bGphW+V`]M-]9SpX"^F&s8r9T[*QiK_"j)/POah"uZ8
%9sEM<b4)-,ls7b'7]4TjkW#etHeJ0V0kQS'3\:SSOFdB:^(S[>S)9K-]#5Ib_O*W%3\[0.'mUd0b4c's=>g3!k;:7Q73,!UpR%4G
%qs_hFSHI*9d6N$MR>2LY5fij]C/o5>P+sbq9-/#a"V4t!FSYu#3n]H.#B4rZcK!@G`0%mfVEK;/(u7'n@'DqPB.uWfG2nZn^EK_<
%rF2a52<WBG`M)4si@StaV_`ph*KJRr!iHKm$mh;!Yng$0FDrE(@aQdm(>TY>/E.Y\8B,Z1L]`E0?3Bb^75(HuBnDC(mn$7djGi1h
%3h?_[o]ac]Yf4]2nJK=03A<PG5m9uD\%2&]-@)pArLnd--]_"L)tXI^)9d?i"Eb9,2Ep-*-TTks1Ps;P4DF(o.,E+&@2qqrRtj85
%1b9(n\:cnf^SIt]O@E\tqkFjP<[KBVQTmqK`32cH]!<]"$geOY0dT:KjZoM[2Un0@;qB4OSi'3<VaLpHc,_#<,LUQL.9]gXGHsr$
%DBqKpJmjg%8?HK/J\=keQJoA^R\lHc_6[q>s)7A^=tEm\/C!p@r"&di:_]FPh(SS)*M!WC6$H1mK_*]l,=QcBKN(L1VpW7tqo5/7
%p2]'F4YH.7E>3F"U$XYeeX"mqGo]8c-n`FPmPX*iEf'E!8(0[=m3:d3&+>YlVPOOGm(25O?mHJbb#U5>(0^LQogoiJe9mot*Y.OT
%5f*)#95$=A.C*u7:fSef=OmnE6\P0K!05!!?<X+&;u;YI1_b[[WYY9\_YHW?1\unYI4R0]]^HP`V,YU./1lLAB7+L_[QRJ;.jYiD
%!djEjj<gQ2V.>n&N^od.BFZ9U3V2164uUt@YGM(qa8.UA<>:0e56>=99GYfLn3n1^if!jW-^:Qu^7eWsXc6?nDFEamd&Q=W0dsZ<
%'0_\Ch\LFUR5`af`ZmTEAc9q*XPsKKj3QKG*\&mfF%F1][<sQ%$ca(HnO_Pd0rW:^kJ.++=#4':+=VmRK3JS&hC%1].Sm"&P5]b/
%H37\I[aq*,fnKtk\f^7[B9$Kb:HH+^+Ps&$+DM57<.rd^Zi;4I^U1$kFnYc%'J[s*J@hPmfUkFil-SPIGh"/TC6UX;OkWN>e4<Pd
%P)g7^,4W%4JkDWm+SuM+%Ki!mD*R>:4$!GZV:+gfo5m0iF6fOoo3C):Mmjj#EB6o\\@[mN=CeMb>*rKTBng;Tlc\Y;ln:s@a_V>A
%c\/^+!gIW'/d<qe-&8>/mXkYka4`H5@7BOm326N@^@u2R0VoW2L/O^9=4"&O6/5K_hjA;oc]d,6Vm#%AlrS$6@tA</(KWeuQ6KgZ
%fp:2^.n5?NI$$N%$9B-ql[h!hT1E2<>5nIGHg`^.;<833""61#IT(JPs%D1&05i/QcQO<&4HY)7GGp%!.B;_S,`1*L94^IXdq_F/
%#l7WW^R+p;5,SZ%b'BH.ai'a)TM)#\`t#ndC6/hQWP@/8L6YgOc!8i<h2M[9p%qOTk@+]bUJU^Mqs5<N;&m*_#@I@FSHL@*On%`(
%%cuua*b"b>8YW/#U\-Jh)PEiW]Cmm:Dt=oMF^O##@og'45!$;hF`:PIePo5R#&k"VQj`JkQEm?/>WBQ8XTR6.X/'7kQoe!g>Q*\U
%8.+e=,N[DR6mM%R8(*\u6"h*AiGjG%bkrV"Aa/rfXpItV!j7BLpsq8g;;9VgWASIBneg+Z6.[%L=&[#[2.nsD3ZaU,]dVi!TuapZ
%0h1WG>a+fgFu&1Cee0(1kel-8KohPNqN^Sc3Ul>V2Uf/&0&N!$_?Z9JKs7LPO+=Pe(T%hHY-Nj0!G!IoBqe_2U-b!UThm\5[ku;s
%_gpsJ,6l@ul]SJSH3q4g8=NgAT0U3GK!&Lrb5np`eDe?``-.[pGU`&-7o]5^[B,7Q0452enXH8lqNl'65+CIneSJ.fRaSZZh8q->
%\eLftlSR7>J&7Z4'$]6/;8uR>#1B@@r.5Mkbc&+(Y(X[g$k\sH02c+g<84k=2JPd@`VU;KG3o#la;AsJM_7Mr>>o0,#B<Du'p=/<
%Dc2gU7+DkH+a.$jq:-"/_:#,VH\6,??'2>Zk7/=C9XKa&]*Y^lQ4*fu'n&m4S@&N_G62YPomB&8`<+?*QW+5?.P$<N"4X?$3Ue-q
%5uZ$[BQo/Sf&*Q*4lOF=ka!LZg5V=FDDm&<cr<<\N4;=)ZocT;opJiQgnLW->r9#=)2JmQouUKCLb"T,#^q$AB6gRIU(WBB,/mHk
%0<$uO;)'p!be).&;#pu[:j>Somi?KD8IoK1nA^dp-PW:%!YshELHa)=;aU*TUe.@mLVf%S"(k=?Jea<5_9$<k":$L-!;Dh:SD?ua
%\*offml,>r)=`9RNGs#TUBPTa\bPl_2Uo6*f'L[G(p\QJ3':<+'[2p")$gi4Y@`9;\jnpd:5<N9cTVXb[O\'jX@$dJ+"-AD/Tk]9
%TRa(%mBsLH)A50X)Ch.2?.P+qi!a?j3dc,>88P5!+q_ZJ(Q&5YVf$1h02^B"=Qr_2(+W[[?*W0uRhg^7b<&coPFI"3J!bZM1srVG
%PVDl?(@%DFm2@-"gZ4$mQB0>*DQ9WOc"S(K5pgndc1].6gITc3oUlDXqs$tc-V6Lu+2#YW'ch]s3ucKgBJergV)@=d`Mp/1?Ki`<
%+<8S!(:5[%SnRj(E>>a4bGp20eCRA1p]BWU-=*Xr8EYSt,:,oAKpEi\n&*`rGYcioD_6G*7].o/ajUcWWcc/Y4]/=Q%quVmp[T6=
%?dj"kg#e;(Ue(TIZ4bhbX?1-gC/*;W"QF^Jgg>,Emn`-L>*fp;o*r^n,fLjiP3`.A@0,m`l\JBci$BKTaAQAF+`GQm5u6^NN#Fub
%>LK_*6uDa9&iK"P<M`7?V`*"<<QL_*a*$j2X2[D96mC(f"%mHZT5,R$83;c$I.)<ea$kl0&1*#[&X@5C,RRp_GB=QV(\SKahC_;U
%1U[^Uap/thG1]huUljGk$@K91F?Z1B1iDK*G@Ns'_ea_?_MBTVA!(.'L1\R5F&)\qE(e\BZfJ3iZme(I[Kr[@>=YNhX=p-SeXKi9
%bi*(>_pMdS&)ZV:RT),>"#:q`h2Or#(jt-un=Et%,%o)c<QJK(c1OIAMlU!r'5hW#^Y3\,R=1!/VV+]fDN7q8a!P"S[cU'hn,_G!
%P+@2?4eu+A(A>;gUE_6eT,Q*6.WfP#^$g_'=G+I8:NPAWj?Q5m;CWUB%2%P9Re=p;JK7X8F9uq9=Y"(P7NET>S`a=lcSY_=R1q\X
%;4nPdo-jPR_=PiSO.eDefM$J7Cb$SVA0ZG!5tmVU4iu8DbpoW%T2eek:f7HQpRHVeApB&!qUdit8Q8S8jJLoTa(B[.Q"C_CXrUV\
%26]tJS\ES(<m%kNX*cU9N\M91jCW;F1se-41:PVeGh3roSCZg36n4JY2uJP?51?\PJle5XJ4A\@5tF=2M#hZ,MHL_)#/-)83Jc6Q
%&,K3ZI5/\rVeRVlo)n.u*sV_`3M7&XJT$''ID\!go3C/Qo7-OP6diO?3k"E9C#J6.6U4'pKC>NZD\K]:ONa=FIRus"KZY'&gM/Aq
%OL].GW@uF\?]E^d`[OHPf^t333&F-a/T95`#S*#4bRBQ7<_J\f<Uq%e.M_8hOJn9hh(,e`e$/iJH0#sqCXg)ec1tPNBj3Tl_)4oL
%/<cc+f\mGYTAkjIOHld-[Om6&2?B?kWMFuXg6-._0u$:Z_mUB`@(q(t-$>7!bFtQ":3t8@3=n&,bG6idJK=X<no=P`;0>`YIQ#($
%Y?7EsI"f"C5)39#pGM^*LgT$^KNYBpeB1XHouZDlk#j*(f8>`iR&$T2a^,kd>'dI+$m-0B'llRo$6&S0aj.$:Zu!haOM*A594"1+
%3n4N8m!@B<Q;EYI@U6@Kf@\mPB:N`3DX83X$m7Fk"\e=B2RiL?fX,d.X`)*9Qi5;U8n(H"G#CMOn8eulSV]0>\Lfr[IdRp:W]d!B
%Mirnq(+D-XRC[3pQgMM!DtYBjXNdF@LY9aCB[V(,m@k'.l"V.P/r%HB2=eqif]+pe+e?Of&;BcGlTU[>TAA.>/d?YL4h%s4a[:8t
%<t2$7TiR/]b5A'89(6,,d]Xpm1i:\f4OT9e6n;m*//>/r6iU:'Y4?M#;VT&jE=%1#5;BXUrSX2>alQCT$W?%PR?_L87=KR<Ak*6J
%+#pQEnIF7=;poEJ^,KBlKsK^a/*M?J2oNaogW'Y@bT/DJ2/^_Jp_\]d6JJ)5#o5C*<f-]U3K1OLM`2,BP9$HO'"'.uF-7tW'D0g3
%7o&E3j&hN5O*.L?P'/8$mlQ?_M0#gp2qWG"4!^"7b:ZN22>roq6UK7dJ(ns9ZP+q-JWlOTRu.O5+Ep`>N,.JhDiE550>B$m$t4&L
%S-'ucH&W:<PUYm/]QRB+dm8_e@7ccHZDl]5_<SeAHrRAH*ttL)^u]+SI#Ri6iO(]t$RXN2]Z2ccRGD.kZ:T6L4h>=k^2?ldZJ7.g
%FZ15g!Mor,Zt<>2RUR06Hni/f^39,h/d`X_`?.#gc\AhhD9t?F0Su*50[YN8qUe\Nl=;>tY>-VBI#XSo06#6a@+0NXDg>#.]uJ8L
%e+1/=XGW9pJ:]6DhQDrUn85,bH:T,_pNrba+4P!fHdJ^7#TdP-Tj&(\D.6]8XTF5fq;!1sF[TNIG#Ip,2UNcdiO_[#8m((Yg.g5:
%K5]mo>fgI#aX+4C_u8siAu'"J/@.7/9kkZ)XAb=:f>34\XmMcP$d"IQ,FI)b?=Z.*FF3!PDu8VV(WpU;+"*Z[G]?ac)7FudE>I=@
%G[d;lJ>1*]3d:nph>A<g-mC7(:LT.\d'[!ebHkNj8BFj)C_S\b$#ZP@[]Cr^A#2?T%9';?]<W-;&qu9^$Pjoqmr)P+#L\K49UCdh
%f+5d%'A9EE&/gNrU1-.f6qc(E$cpWlZo%V*P$dBqe>>-I]VF]r0%H14atYs8<hX9FNC(gJ1X_tBWb(VB<MV$.VcmX4AQc@c_q,fQ
%4u#2i9-@b4\VBD^R]ma7qqG&-1d.Z(<-R%,XVTSik9Ka#)c2GG>I$l^:rL4jO?*d;HP<<>__^L%.:2Khk-f$QjQNpR]<\I<Q-WJm
%(o*c*X.h:';;U'@N#+%*@<?QLDZ;j-"eY@c*`dH0rhZ)Q2VY*::o#8fO_OPm.K@chOj1J;#o4K'!Q`%$4\T89#_Fp)r=Bn>#K"n!
%Tb0%&h!G]r!,l;u2tHAp#2/n6Pu'9kFEHIiaK,hTEYN^=r9susIW<460GI:BfnGHf^n#aUTG[R<aMYBY#iaNcHYXlkf"^`KLNqg8
%7lAT2jn0H2)BeXF=oBIrg"$KeLQ?s^`iT_oG.=hWE,?:!lGO@n/T?oQ><SFg,Q.a,R1\.HqookNJ,$F$YnTMX]-''$b/-[Z.&p_r
%pNBXr[dm77=MmTJWcpct/R-((O3(F%<L!`<mrRn0W4Kem:DJi?,P-2Qink9"jtj42o2S\.&/9@))pE2+7A&W(-4QbGhO69X&44f5
%C>WE\P)H9p651-"5npX1(d_,T9#:`#[j9tA9I`*r$N)'cD+"PXW&Jm79nKpU1rse-]1bKT<;Sq_X4WM\Zt+#.6:'U>aQm"eW_s1M
%R&^(rQ(sY8Mp4%\5Y8?bpi/U9pu.rMGE$*/VT3Y6<0]F"r*)Rc-JbtU?S+9;V,]^Z2<[#]Y/s?Sdho@'1b]c>W<sN[;9bG\f3p6q
%c'!K2>5`<GXuH6H3SI;P@*3[R?WUk@fu#[^2X^s[WXfMmc%KXFM89Aqln-h/G@Q*7\ZkfX)d3Op$6"cTV[k++WnBpP@iK:2*p?#*
%LcCC,V+o$2HAZ2((H8L4MhU]$c+ZcYJlgcI;lqa2@QJ&$"X0`r%)JX&U@*[)S6iP5hF](AOs]j[e=W#`[.1'.-575!n\MDH>-"u8
%?&,F\+nrh\;>;aMr[6B>aBfCZXK\P)"$u;iGO9JiqmH#D0!1uB/PSOUBmeDMo9MilZ+7L)GF:HkXarTHU6bGkGeJG:^\aeBlXq`<
%lVd3_-FHsBLu;,KW]HAIA#k<&2O0hB!^&l0APm43,ZManGgao9n^Rn3Y*/ft\QgBoFEY:O+]JesGcKpPZkDRKWGQJEALXZ;gILZZ
%d2RG?'%6S@YDCNX<*cF#caN/6b3f&8oKi<O-Ptkd=*R-un,GXFh_*mC+ta%+9W7j;R(L:$`;VkOeb/-5bkKF!cFb5I)T(gKJN#ON
%b*VI_09si%VT@n@YLu0;qh%I-[mZHR-*d_07%mc.o'C4[?.E8iThm<Z!YW@HTmh-?3CM!I4"B@\fb91@eAKAsQn`9q(lQnO=Og`Q
%'NjJGiYV-LER!@\MV24fQ525''H3hnD61EL<)>YTh<Rq](lXHBS0q:P\q^N-8QHA&bSXifV.]@DJe/['+,J@l8ED(i9pGe_($7u$
%U:tcbXP.JJ.TUt(aX;?dU2$.6BfR_>1(>YMn!\%`A5#gc)c93(CTtg$Y15TW)OF'iAAqWMkZ.;$1Hq*$htt7.plZ??99pr4Q(`Z2
%5tk3SDT\QJ2`>nT;AJ.iI]R]A;`=(JVLA5Z3L*m^Ufu%/;BtX<3([>E&).gk]5D$G';*ahE"R!Bk'eo25M7VXS6hB_MlU_6XPS^H
%Q_rj2685qRNq=,f[=Wn%FasggC"t3'IH/'&NU#E%'&a)Qn>/a`?ZMlHQ1]S#]B>LQ7:S.EqOQ)Cd?+X[lJkSYBbtLj85f]\-$X2p
%X.e?!o%M'9?W,tH22n4=^LHW[So=>M+5HT[mg(2Rdq8B[L'Eju$^a=GI(ORmR5<eH3"0O"7n+N!Y$9[B9jrXH=+p];!YDR5cl[%(
%GRG_;s-?G4]q,]c,INI!m60EGl$[pIr7fZC"[6i9*odjGjuOu;LF,nZki+!=**W]SVBj\;"MnB<ck-n';[6jAg=7rEo-slMX&NAj
%R,N%^9kXjLS/5bt\EPN[<ou-&rN[XUT[F>1DtdaT?#oeTHi^Dc6LZ#:"5Nuk]205@U6'Lj]&V;C4-m*JC"Z+8_pkq%"&bK<ac:8G
%NTiskA\,,"@0;J3*<]4U*?d=*k((r]4NrK#:a$-eAV8K,9fTX[Pc#kM5B$Eh7"Qb=>`Q^ZP<<S:X%=iRLa;CM#%oju'Nt]AVa&!%
%hnY[/KQlEPT$Q<!(Cq8_S<@u'G#gtUJ1Q+VICi41W*1U?\?UKkHRI,j8_F`g<:[M)+&6dKIU\`mZj@k3>q-b)XX&@i&Pr7[d8.-[
%.Z'dbKj#s_]hUDgA3\K!EB2Aar#VCC&tjoG9sOkFkqY5<a%*$XDOL^0qed6^/d"(eG]&ctI\I)_eS>`oNU"nj?pgUlpph[o*@J;5
%;?fig>[@$d7dr&M]JQJN6o6g=YmU_7o@M`GL1UHr8WI<'SoT*HMbCA>jP9>pc$'q86p3LQB!X@@d*Og,m4ZJpBsMF\)5qTmfTcFl
%*lk[t8uQ1UYhJ)Hg&"a.`o)*D]cM)j\X3G\%M;!PQf4=gbKX<f1ArWEdEoYQ%0Lb49-j#p&)aCcW-^698k<lbL5M@L8X_5_H!*p/
%Uo[H>:naA?/qPs,"HP.YZ6V4(_2h4j@d>KK4k=b^Qr22LAr@-KePP/f:!g;Zb5?gN2rB3Y]X3c2'W0\0B]>`/U:.6P)(%AnJV;j4
%_k.WZL:JVL,X#tc1^%(cfsVS`nJb3aKgV2pY,oA&Uto::0W<+C=n36lL-VXX17QGPF\B#E<Nr\K64e5\kXn(E*0M?%@S@:N,rJ<1
%hjH3GL#q25;jC*S.925Vq5PqE3`Y9$ePp8&!N0q98lkgB[elE$4)^QgbiUSA_^C'?j?)^u<ta5,;F?8"cO_q@clMu^C9@8/gY+Va
%CL#+8YrcCpl,BjUd$%Z%Tu$VRDM+fE+Lug;.Z$@EQZgFc`"Tg:=E^oVkqb,:pG\:lQR7GKeYmmVYl&<#/,NclJ_sBR*l>iH+*Zm@
%@GA87n")/keC2>&"&Ej>06dAp:R,dE]GP,sQ,Y1jnoSMAr_=TX:H[iVH.j(c@@XR!es93i3E-\VMm:90AQ3*+7q<=^c6tgQ@7q0S
%@LFQTQf(;iRC>)L"KPqdNAQJ?ep0Egkaeup(B^JC*2o`gI(nB-FC'\<Br2)\hOQ<T!pnt(I9iXkG^7)Qi9<,mjf[M8H0]E$Y0fH;
%aR=JZ_^?MtFWGpV4k*L!dgL#PP?qPK#%0nrUg-+=QN@VLGs9a^$Yo7<7RgW%Ohr8DAJYsE!u!`9qZi#;WSb>C7HF3n\JH];P*6!/
%bH7nTOkr(RGDgS2nUQr.0<]A#mco4m[k>9=69]rg5Tn;LG$X,e=I2fGkZ;)W@]Ek4J%0XsK)6e!=+peOfAT.jMI^R"$2dH-ZaH*n
%pg6h_cp_+KJi+J@%`I6@6M';Z(X[LK?DIm8M7'%J/uO0GHg>X/FRJ5kNrq&=EEqqsI@mtYPq;crU>bRS%\J!mf6-lCgE4&%maZOu
%i\Vq8MmNUR!.@T*%XLY\&j6hZLcYp3f0"t%5E^NBpCF@l:@ikD6Zh*bk?at:]TiTnjmiPM!D_8,^5(pC;=`BB?4K*2gqMS:qgP==
%;+ZE2L^3ZamuQc'ItY`9YBjKgi;Q9jXh:h6lYoM9=AT\FR9mJ)[05F1GoaIeCT/i8Gs77?**\0<e[F]@1;$-_8a^\E>YQ`*m[E_s
%FHK>SO*<VRoP48<f5LPGG/s'b$GYWhpqs8OYI?T*RWIFD=?b?0-=8`_-Y]JR@X20'LSJO*YlI)Z,EnhLNC0GA3n9DR,g:uo?I%06
%M"XPcl:'D8"7L=hFY(RZ^?ZPSmcE[c#@?8'?gdc%^Qn+59'/pD49*^:7_j2qPE!n<V2Op+[RSNuGeFA9;CJ[%*VmZRa'P)-rYdVM
%('?\#Z^_M8*DKaAI]8Ol]EBn9DYW(dM^_6j?jXF.S^@oD_d*bb]YSTuX&o7#?K669K&>$mr)&g==54VN)6sroVf'<h.F(if%WYT0
%ZA0ppD(<6MAu3R><`e)m.B3He]HPN>#L`T-mTo4Apg&(`aFpq[`Ok`<!-or;H+Ko3hH:P;5FbBmY@(GDnZ'o>Ooe7eD1t+]jCEW$
%n$F@4GgNXbkU=8:qM/:<0,[UBJc>6R4A1B8ferM:<nT21FV&)UQ\13>@+4s0/dDH%Dm6jojY!;!,.pH&2*L?pHoW*&a1->#(O9J"
%5N$P>jY`(A?+o]J\&Lfpfl)?\54P;LlgQjB2,[F;g>!]IPjs750:`;+$+\r^fY1'+H@o*#>WJB$MJLZ(D\1UBEQoWF:KKW7r3eZ\
%,$jK(CS*62!:(m9FPM%43;)iea)S#DfN5\6gZS!bSU0Qs#iqXuk'+.5T6SYb?3QF-TRXI?q1>(\PP8bY].CgW<"rVRUJX=+g,4fr
%9cf5/-!Ee@$DVk73)DA"5@<b&3j6AXZiS-@'&mpl]$!u7hps)WK?)I._bRD>06[;sceTEW,Z_\U-2>E"^+R7ZgqG1/Zl0sa2jRmc
%pD59G]0LMdViZZm.+Y3V)Mgr43/P9l4bk*I*@T_9G.uZRfm!+$MCkZA2d&#M?O_hDI_McfFPcP(IaI>Up4][,o3:U<i1]YYIsYC/
%.Q5^>gj4@Y/WgOQ3GNlEr_Cm5,VuE"0)"YU27([rH<L\/dV>Eo?,1lT!suYoHLGkjd<Pn%UgSh*;LH%qD:kMTSF5^;GP98X!KR=9
%YAmh8l@$Ft[eQEFiHO&nJ(So=(&^SZ%1FqN<><rfHkO;9RFJAPN?ckZI#2di\'e2<8\ACV)>hP;\DlbfbLJ3h^T1,C#XLXHjmI4J
%E1Y.:>jf0LC>M+FmPsY,@f'nAn+s/42b7e_moC(q*EtI#eN!SJ$h=IL7<mD<BFbm:+]P4(\*gKIMt]+9*qQ`=?(t=%#C!k2*6+]"
%h<q=L7-=_u&OK2U=FeHBeA+r(GlbKE$h/DPj1*QrmAjO+laLW_pq@.*48*LgW!i)$9FLOj2R^ET@M-B5>+<;p"6!:UY[*QO''cS@
%atJXd8`7f8Mfp=QVf1;dPsfhcak'g%QnTV?B^g%%%eQoJo(6)+A;PhJCBg,f_VB)J[MH/fLVtPq!F;EN#,]Qe..BgkZYfb3E3.>]
%\!C[@]CEslq1R>n[G:mN9ri=N5Ze@R$hP^/<5l)5Kl:uZlnI@+(rQNa)k;e#?*[DZcPe3_M&re$L=+/+4e92hhc_a&.D*2/hI%8L
%XiZl`FV&6dM30I'1S/'mDMNK^F9k5!5iUV++UAeBSUIftp>aQ_!jKbQHn'E6@?Tut*2">Y;r'e:FcjVJ-,><Zn[@CZG;H[X26;-B
%e5P0Xm+FWO^.WM'?-qDRpmFb*-'!&05ZA&<"5&WV68OI**4j:c7cjNaDW%u:QCTp/_lm[5d=E2nM*q&]fWG'+QEY5"Sfc)0Xk+KV
%-0[oUG0S)!4%?LK*?VQ!>GLR)eID(RK=]FefYlEt2'A+V`0b+\^[IhlalcJTjs(cq6EjrU6o.0_ZM"Mb[\WjGCD!H3Q^o)MJs!7W
%be-/qhgVALqB6JgM8ER&J@>j_?H<^qc+Ye_c4(+@0(;_RID@8A)qk`^6=ZD/66te>)7Kh-kJ6aL]($g0II9%;a&ogT9Y9?!<:jh5
%4K:uc*jFEa%$"#N!.EKD]gs+RqOLV>\o=qh9fY8Ca;dO&^0]!$9F4rWq.mBW?[KGj\^]g<qe#AdfJ@&h)Or)97m2Nk[CQIJ@TR&m
%X2,*hE'>@S1n81,ZZS%E'uJ-_0274@)CdY'VS8Gn8CB2KCVmfE1-]Agr&]S,D'@7m8@hRW6YL4cN%h_OX&'.;RL+c6G/-\\,Uj,[
%Jek4l-c3(L.T@N&>6mJa<X?Yi;]m,s@"+[o!DoaW6B&u$>mMtb&pm+o;M2hegQLoa>,I>t67cMQ5Xgk^?2k]NM`s=LP1f?Lok\eM
%bi`\,OR2=.,:#9%UrLZ4EU+JLm;,I`r5H)<eJJ.N7XBe5])(V4^@\2,es6NC2NhhV%c@*d?=PX+"H?Vf\$/l%$pAD50G[2_glgVG
%Ms[A-kn3[B-HF(uag^(P$2'CQ*85\D-.eXr%#mUkm'&OZ7$C=Gr]P0?asI3WeG%S]^23m:CZbcfl!O$sY"G)TGigOW2&H+rJH1EZ
%WM5l*$(E.P^BG$YY,Mu06g,o[IRoo#i`Y7g`d%M;OBh52;'ZN%l21,qY+rI<QfbQNrChu#c!r=24:^t*9+3om?C!0O&bu]N@?>MS
%CVnr;&6BX(5O]fskO!YkhR"rno+:b,l&^"RjPs.m^1qAS.-',rD`AfUlmn^V[I)(C0([l]8Vf:@R-2L.$.1$)n"iGDjI9?]o5Q)G
%Ulg.dnHYepUL\L:9[0fP*S=KrKO$28D61q48Hq@'&`*b38R5HdGoo#_5*1%%Q`i%oDFZ/>@,6):VVd&H5p>ErO.4Bi(!5,ldC\cK
%gclA&U++=\[>ti+?Ed).BFo_49?Ar%PYNm8&-Ts`S&"33@gnt$QX6tD[>>Z&#h"5<"tM*WSC[0C[hM[T"0iE]+]uo3FZ&B4g'4W\
%-A-kh_=o!qVGtfr)HI,'BOVu^CNLPriHlYp<4+c-pY'E6f5/[?-4'GJX>8s:26Pni/eJ.Ss-gr'at?iJGu>Cm3:/#D[5s\R7"MiM
%O;Np*+rdAj$-VmeZo&6W8#!L-P!i08;UeVK*S!pp2'9sng8Ugc6Ub"2/>Sqj(`Q;Ubt"c@Dp+s`L1o^t1/Am!H?ct;P>h]TT1*F;
%fHo)C*dF^HYp0R,FqqUh0X;+Od<IA5c0GLpjuN?T9XkZH"h*Oihtt7.Gk:$ahp7pmKi<fJ;rc7sl?k;I0r*[l[knI'?GeW#R#'F]
%f;QYVEOm_.#Umbd5>bV4"7q`ZUR_e\hQY046]K+p.0eRe790iV%U;f\K#%CDqjL'"P=3e6Oc6F%;f0d`->EUZnZnCeBrme8(\,H1
%kGd4(!H@LO[bK#0r-AM\G&8j$4gAV@\jOuHc*5oqr+s@^Rfst=3QVndJ.t)OGA/5I(RK$c.WK8_9Pl!p(:@Ug.DHE/Oh4sirVH,5
%f@`J=a4rK/e>Co]#kJgDmoXR']ACc08dF^N!Ldj!EZ-c?T/$]9S2T"X+Cs._=bcmHKKsY9=Dl/f0QC;qG>b9e*?*h/r=i(Ir7>q=
%Wg\8`F2Ga#VsLj-9Z)']MJ;k*P0f49Hbd./"?Rk5j8'>ep!&i_^\WfSGfT'qLLY3nGBcN.hijiW`@bTc_h=F:PD9H0MJPI97`'gh
%DH,F_V<0W08:k2?E7i40#!U(HLd&3HqKJ0D-=JW&4#VEj*?8t4`Slolk_/A),P[I>>8ZX?114rJpgI)2"C[d*l!eOr"0`>Qk%8;$
%%[m[Rl*pn;m-t7KEe#,WT@/!+%i.l[Is$/4>(*Z70,p\@;.1\3".X"TNT;6u4RJ"N-#h$1q%MVG6&;Ch\^_5Kj>o\9d>:7$V0PZV
%+=F*hja4OkmcbA1p[3Cr_[8LdePo_DL#atlD"e>W$<A]k;VoTclf*ql6:7"n`*A)&*<ak=c75Eo?`H'9`l$9.M9]:$V+)3a&0R_g
%ZL8t2GFGHH7g,AdPPZXM7,cTt.5XR5@U(q;%LU?j?uO3>f1n1c@6h%>aO\1pD0PQ1KX2"VPFi%?FVe*mOlL$/?@TRo^QHnNd-#`)
%#5IFdkBkpu(KA2(8(sVY!pt'G^[VuA^([(n7HX`l!8U<[a1SZ3l!b`$=K55&+jGb&&\rsU2?Vs#JVkO;VhRnQ0pI5mm6ogB,()sH
%WEB<m/,<UCha2DgC(&!,qNrVpe$_uB3[Gs::18nnH^_NG4._mkFWdt&>D'orEX1tOFLLM'`J^R(1$KVJa.E&Q8SIhB?TF5[!n]A*
%Tn`(/+9QR8g*51R7e9K"@("t1*A>YoBbAos+P)Zld`A9YkNgb1/C:&+;%CR$&T<'A2]ne^jJ1;05_o,D8NR,=m0(T$<7F>r/R$H^
%j=o#g=@E*;O7VKmPfFY'2GOKV[eRM'1J$RmK>Cd<').\^^3A4DI"FdWY=@m7f0meW`_.WlIN8aD_ZuB+!ROE,BU9u:(q\P^'a@jD
%VC_Dm@-_e@Y-eQhZcA%"j_M!YQ64gZG3cdoXbU+Vi+ATU;,XmrjD#SkH5sb.D:(i%_?s6FC)/McA>2#FF``9([>bQ<S4\+b#6tr8
%HC?Bm^?[`W`#usa%l.,*AgJ$l[T.j^q?%ZGK?WD]-0/>#\IDsd8TF>RNG[B'S8?TG&=Xh1@Lg!\UijF^gZ[<G'tTsgbjJ]m^d)0B
%1bh$B_pjl-XU#@3SHC1YrEYQg-+bZ-PJ&5UB8pV(08HCWg@7YK9%K`K)J2%OU7YY1Qm!^lO-!="1W3OXUkGJ9TSIKPa<!<-81mkV
%`QU\c:Bu3L#LN@F'EX#omcPAn2I*,G0m$".HQ3MO]K;Lk_?eO+.=<UG$TXs!%#KDc-2Q3(j.K1_>3pjABu@7fP^QN_>Pg4P\YH#?
%$AY5ho),'P`'Y/q8a6m[bAP(i)a3"q_0f:RkLj:]W)g[_%TVXnp'*K0+]GPr)bhukW!;3DL6!gI"!Tq@.hd>_!SHcXeT&:++i<+R
%7(?5DLj.#c_WLq3T&qV&"J%M2;E:GY@a7pE#KufL(kMXIKT#e4[kLnX/A:&kS>Q`534\IeQW6)fF<+tcl33Y)Z._NCak$GViA/O2
%eqRt9=U!GiE1,E_OP&J&#Wj!i2KQ0TSm+h<jq8_6PndP?9#,=G/oIqhhJXcdDAJYOq,G59Zu$e1F^2;S`c1'-$]-B+;o7?>f1Wh!
%[uY+jHld_XX055RI!Rm(U[>]"m5leH'3nBSG@Y>f6D/0ehD'ZL)"H$^MA`e]NIjlFp7B"U0j`Ai3/$p@TLH?,KX):`os+]GA"U93
%3)C<_S\8Z)ZA*)aIK[JL-*9FEgNm((Ja=)k:^#YimdD0WgB17+#g6;%Q'O,kZ=CkA\K%Zt[=+1:%SciQ:.Hr.-u9)61-qqaT5jsl
%jclEZ&>6CoJ&b5k6nr2QJ.hhHk&3(7A8"W(Rj^SWd:(\P.Z<<ISa)k-6EJ5hn4$i'CIU<JnLArU$nR5/p+TK'f:mA)-#Iu!WW8kB
%E6eD+D9c>!*YU/$Gg,KN@O<gMj/"uZ&pqVH1JOWlhG>da,P!V,,'(H'*l5I<^F@pup*p1[9F@bOi!u$WU]9hcZ$MCD"NV/5[^Q"a
%SH'NB32<Fd`eZO)!b@OkUh!Z*6,<Edk&\7bb"p-D$*8(:*&lt7^@3C`#a]_;E_2QpXBfQ5jiBGVk1Ja6N?mu^&e%CX0gjV=C9[6Q
%Cg52-dB0VR7(Tc$lbsMiCqR;k9_:G!=I,e%p?u*^>6cpkWZ1C,m&c[-4M+Sk`dMP9]>maWfb293B#rq^Ni*Eq`B'9]$')&\XE5\L
%GieJH_bY8J%Y3058<G9)'3N3>\41\1E/8XF$W`51h":Y0<U0H'.:("T^!MQ#H#:Q(jY=rM_c.t+T(ON_SiZnT`Gi&O;MTM,OtbB=
%oq1S<2<U&p`:MM:CPA/"m*n0bB]$"^E&b0O0iA8lrQ%1hF.kdt9-<$SrT>kY1ajYQg3JZserO-FD2)u-cI=.;@1_PamO]j2P<?gZ
%dKNGc,;);4QK#aE@hKqje"g2FMM`4WR:^4>Id8f'HWhc5Nq;u,AY3595HVt2b93.<q>;m"/8HUBUj^=,[kshai:2X44`>c-2CuNP
%6RE^$.p$4C]p-@W.^4$JBf5rM0)P:F:_*X7iCA[b;bH/:j$)"Es0pn#qmYH[/,g(ZE%W%.O8n;P^]*["^]*hWo'OoRs6YmIreGu0
%s6r8P68<[DE(W0:k52RKVmGfXfmiEqngC((k)Y#g_sdVIs"(H<ZfO]Kls?_XGjOsCg&LcXJ,\&Ls78JQ6i+[Of]V3\Vte?8c7K(m
%e7<MZjE@$/k7(2]X>^VrFH?&spP<09Wps*t_tbnqRM\6UC%gW(m)(>I:JU7`^1_oRB=(YYQhY`p:!Zh7AE,+Qr.uW>AQf?DK=lG[
%q"H-NT+0DI"-\VH22T)U)jhNi_JQ6*,i3jU'!SF[IT2=#FoD(jC6Wn[YGjtr%X3@q=aa@/>*g0L*a8lQC@kMc5,h#NSZRs%Y#dLW
%W#BLiP@E:j8rQl_@'Rq.W`fI/>]7m)lr9=.H$EKXH/%PZiPo#s<\1jnqYk&U,V9@%F0GOBMnWrR+%hGh9[F(V]kYs@eY3EA;g(WM
%`O&/@'M8RqXm3<1qN;O2R59uOcdj]I6+K6^'hbVmQ^Z0:]t3P@V*t^>c;uUoW^VCk/P7bB(luYR?FB"W>#^X17V"G2UX>/TBon7[
%.pSlJR-j'ZojQ!#N241(UB@6'-`]F@2aKX;lIV(5J%Pt5p-ru&Wc5OadSt!L5)gXG_)<6G/fL<ZkR45FTVrMaWjA^%IRCm<P#?eV
%O3Z'&![BR`cq'gk8+AKm6:nXT4DnEtaml&j\?*SS-Ck&=j+&6"B(DDEglpp9BVnY0!9TZCDdT7(5`=1[V!52gW2?T?/kS%C4MAFR
%foPO/EO7U0?XU>X(ZX-&Cp>HNKa#6-c1X#Drjpd3q.=ErlYg[Ir=Zf#_*-9(*0]\_b/H\#<kpkR.o'8mR[(Kdp(()l.50RH_/VBe
%iJR7'\j);9"QSc+))$J>S$-SubLIpSWoI)rIYufQ;pM0d=&"'F%J>FHZ`"cNb3N^f6U0_s4]SG??7gG)Ee,9kS7EC+82=9.iFRK]
%V+ENtjZ9S[o2TZ,:hio0nu'``=03pR8OlMV1(lF5!:nPC1Fl*K??<@]2?d6>[t;/Q.tR8)67U);:`OTnWjoe,&#;#i%@mCI7=S=+
%5F0aAW@uL-s5n&P^-lbb*>p<=.!4IoC0Is?T51@]*MY?A*V@o\L3_hhUbmis^^6tJk%ITbD@6+6ZG5c<DZN(:C7g#j0ud[rmQg%O
%PBe]bfs>N0JF[c8T.':=!!GmIBf]j%JU=.0#2Y@*r]hDn$Ppg5h*>:*O<83>!C*I%^CdgL;.Y(=bt0p]:8^tU@1&2UNhp"aiu:Gt
%,Z_tU5>*&\($fV0*D6VU`6(M@kVed+*^m)O\aLlAh8lE9)pB:-r@(C.l#K\Y/U,!*e\HChDXTg<HZUo&$:'1!YGX2cY';C(Tb55>
%OGds%L=5V]LYc&fL;"O%^[N<:Z=#R+[Y.D*G*mKMOR*.BcTih00Q0R\)dPEXO;*GG-qX]%-P,O];4ISgP\G-FrjDXOBFS.!0'/\2
%8L)WSpV(]_6k=!?BE\D!(ThoJrio51F#Q&aA7<E3G>TT2\rns"Lkg*g[5m95N[Y[0%Pf9RJW9T4.[-f=THgmA)%X[87J-$!ke@'6
%^5N!^<>4ZD"h$&YR2V/s+u<k>(E",RJ6%i`]J@ir*aR`/Y"sYB$?-VclKj$C\?I8/?.)/>P&/*V8H\7Gb;+&f-A,48$orA"mr(D>
%P=,9]/ZKm5knt-o>sSHUWG6FuOX]ad*B%P_KXF)LHWDG3!-X,][lrK8&!dPihV&T^PWA7pGSEE9`R_R-M.f[h)S2"D-2$U=F;<%)
%Fr3C:gRF8nUri@O6hiHsd5D\gGtRJ;ONmr]pN!kYJa1^CKU*aAZ,>/AQ7dKq`I:l:T2@BrdHO\[l3:',ZcB01>2hsN==UhsLi,kF
%+;.M?MS*0Nh8EAmAhq=S8^LMr4HF#7%=!2)l4.LX?Bu?>S5/KYA\Rg+&qPOor*e.r0hmRJ>2_K?@&)C-"bPr3-=%97DJ>*Y^M-e(
%hPIbTMpa(Zf&S:e\%tHTbcYA)U6#p!(=7J;QG'mj^/(n*(lZo<KPntGl+e?VA[Wq1?Js,Y;SG&NC`UWCf3RJPCL[^RSY3A2Zr?t4
%(i77"qP#i3b22f^DM=Eqk!heTm$J/_$Je/rd;/EUf`jH=)o74-cu^2Al4/GW0IEt%f!^ad?jJTW^V;ER@"$boJ,#6M)u)C-)S[/T
%#jQpgG;N97,LRtB8_U#QOB/Pk&nnqNWn)]uAr;b:X"=X*K/H%D?)NqiocOBQ'jeMu#$#KVU3M%V!Ibspn]\Rdbt3/`2uU:Vr<$>N
%Z#$a##<YnTLL;H%#,6N[9%8OpPY3<q[8[69.+JHTW`[j=NDT\+bh1UnUiW%Y-m"1n@o^`"cjFl"1nI"/btth,#,%0WaEeW](^R#q
%ADNI:_3g6dZVr<sR(<NIUs!-oi:ft)EMLUZ4g&,_8^N,AJ=tV&HJR@cRll,PC<Hdm-j_PI9kTQu=iMlrC8>[iOgZ.rqYKon]&g[Y
%D.2%\@\uB^"JiY`E05H_G8T4Pq@j'qUKnXSRWEC:\C,qS0,;1SVGRlKZ-7"M3^J%Lnnr_I[dW0]#])OO&6!E&>@3,5gna9%`%;GD
%UPH;'-B5eAQ"2"9CI59h%Umo(&JHs\#e7<;U9Ufu*m>fmI9JQ!p;#uR`o:LZj&c';pJg7@j.9X<-\*Up!]h]>lW%FX<;X&priQ_.
%NdR"PGVH_"<W&od4$rq,<`(ug%FDrJ>c05\$'8iJc;,T3YWXkI%KBMAch_t!4.j9lr3%1*fC(o;CY4eLimN0R!S4Y`C6]C8p0q'#
%YAG+)lQ0ra.5;cl%Vd/uaF20BZ7h1LKfK`2ctV^O$knsm8(K@'^tO1^O(*Ac?tZU8kCPUk_9icb:bjuto)5KK10&Z5Pt_dB/D+8u
%:]^I7's7[jaC>6Ws0/c'5)q3=Z<(RpZ%,jlD3c_G&jVal+>/TZd-Jn*#'fBuCn_UQBTj;l[!s<+l[I+G7(G5Y9U$`r-._QEOI:P!
%l=i4Z*/bp?E@U3VC[8DoKP72iCpuU9^VjYaMo%liNJJL%bV%7SE^]$>.'uN5OJB)V/_<Y,Di%;Qh0,M:gqrJWQkU5C1*esN]c!,/
%HjES\07@?n$?SngPhOIdZKqH'0f0b/VH),$>`tpCineiG(2\6UM6h<rdX$kBYef)DlfX@PYpTMLNGIoaM[QB;)`pH18MJje8ZMi;
%_!E%=1FW0L]hl;r,.?W8$c'$[Ytm)CmLUhb`ed%3"[7I8%U>(#0es=U1tDSaf]SF#71f.*=UU&(`],5IRp%OD-PE-M(''Kq^^anN
%6t.@%#_ZB<<&lU/hUAA&))PWfI%DpLYsi);;)gt;n,#-Z?W8*bT7d.0BT`f#.$>AEfhsX^"_MuM:BY*"kOBb^d7"405b`E(Ub@R&
%R/Y$U%NHg$Zas@cYA!M29Wnpt@^6puJ<T"*Zib>Qd_*U!%bDq:c"!+FM%r@*3VkF$fF&DI'>"?$M&peE/bZSJ,/*XI;[$ekr=4ph
%;a2Tc@XC.`S6nsdc=u/E2CCUrObj?=$T:)V-@U*p\*n;iTf*onP)L#^J?p5<DXj\bp\+lCdjHE;D-/upYr:hS&LOT[BPS;t&h>du
%Q(?Er``*5,lN8Ghn![9>R?fu'Y#XN&XO"'ea>sK1o!7TsFNIuo;:&mCj0j\BqL+hW%t@\`*GBLDr_UYO3D,^G+j8BV!&f0uFb(U2
%8$a=mC#<G^Q,"rClQu5`)q0_^%0$WiYQ:g@:Ya*/q^H>U4EuW/n[cKd\+uJi@u6\/;etIh9$Z>:.Oh61>Qnc8Yg>>8'6=k?hRi_0
%9pil@JAfReETm>=kf;`nIpM!-1#-SMpSG>q!`$R7N2D+2PXBDV^,Z>@FuA6OS*mF!pr8gpbQ/g$EGL-%ge0F_7>>V]Pc'&f9k)bi
%80#a[*;grmf);O)GhcqLpi-HTm+hP/2Em<!on.4!ht`+a&G/1YlB]6B+A(=N&2#?a*V2BgFBn>e0A7[m96**hFJ_nZlbg`_3Hk3B
%d3LLg'>X((inh=EM:,u@>qaG&eb,CR_cGeFeid%&j7J>n`YJcuOqV9;Ze(<SEA@%44u!J849i,3<Uo3-oA0WLD"Q5DEks4/(^t06
%BsfK[D[gJjcXQnbY$qZ;XF9A8[j[-B,!Jq,<Xj,K24Llp/9=P)dUDqC'To$VQ-GsQ)&h:aX%3!/O5N7LCQmRP?KSte]d.#>2j`)u
%DXG?Vg4?r*jZ:XS7%:8\'n)ibJ-F>jpHa)Y('F5D(VoC'.bkbkT/pD#;]%Y*I1fE#h*+R6HY5QcY,9cbbO)rPab(SIM(OG3[f)H,
%Ji.8g2?U&78KNQ_-*42Q2o%U??H0jBEaDkSbMQ;pG/Va%1gt&akCt/_)VQEf!H1XFVlZ4X8sN-l.%A<oF^pfd3=6A'i,eMGQo8Q%
%((/O$q@?$L0hD[X>RNG82hBOE`bjU&S++cm<>bhjU.Y,)ZWm@eph#N?\g(%qB-\r0>UuQ"b]dJsi,&i%mG!S(IRVq`WHCR04.R"a
%CM2jtcZ=i8-rQk\+J4dWP=@?6f10t=`f(dD>(j9?,=dFs7+a*3XP1%D8@/-+6SmYLfhTZ.Ti'87^-dN%I`%l4cHm@h2!gI]=UA$i
%6;chs86MtYr5BgpE)&[O!HXb0*Ek?Jcid6LU.0E^N3]\$NC$X;HSh/dAT#W:B2a&orKj<c#"C\1L!5SpUE;,50I`+H24@1eV3\r,
%f'AKm90*@OAIOAuPJ\G2$a?-;0Dq^$("p`m\KG(dD(Fli[@TZELP,r2-Am'\;&K]I9tp$Zb!Y>`=MB6FW^,A3m%>V/$T6J_5-ajm
%I?tTE/XAOaV"TbHj*3OO+Y/ci'eqm1mG=_tF@aI2(Ye<(W\+qGk2Vb8]l?,B=WdXbjK%*5hnOR5Cjj?Fk]1L&=IXjo#=b?S\==QS
%%rG:#LHfV$-do.,""\pgXh,@Tkjp1t/6P'Xg@2_R4ST&E3Z[dlZ(+A9\hUg%n79rgL3\Oh\g*b,HaN5QWjsbA8PK$:C7>ja/1ZY<
%6An3^r(lg;+!XMo$)HIV8Q%,@Q<dpSjt-^AlXj.TG;ik&]AuQ/+7Y5!pLJf3imIpgalrh:5Zb9sN@,qdUE!<Kf@]eC.#3ut0>_EM
%[A!Na`,Wu%J+Lq0qD\,HDMr/f6Y%5"6R#`;qtubeI`*We-amDPI*K]gj.9EBU\Z9+p.I#$&AU^^LA.*_[j$j?#1f*nD2&N5\3$g1
%km\ss("_pA$JA1H'Ipf2H-q\+hXaY&o.*gZ4\4m&Hb]tfjk\cfFbr:iOm%i'oqfTjZqHjnA97=W#`:jV;_RK(h]JRPq!`0eAXTCV
%Rr'$f--[]6[*T_(Vft#[-T.61.?bc3@bopTD&O&KH2+'.<81l>1IK..D%gYi>OW7W)pUh^hY'N@[Hrql_L,BerthJQ@4ob*bf=<8
%.RFG$0DI_62(3>/(.qa2r@a4R%2\E<[K5?ta<$)#[h[eN=SKt]6<DZr3aJ3U8RWWDa"BB'CK&5eA!_+7d!D8&I;_SVZcN7dmo9)U
%l2eV/T'rXa+`6e2S`+\b0haSmWofiABN;KbfAa(C3Y\\..l>?#%8-t*[s'i4Fl3AG/IbRt6F[^,fM$D/d](0Sr3GBno`XSZ`@?q/
%^fbX(1</Je@/!\aQ^`!UoKc(4p]k)CpPYLA5mI.2U^hP+>@6P^^&U#,\3Y%ONlj;\GBrU'&,VGG[R=#F]9K"-Xrq`keSCo10I2SJ
%_\Fm4OMKFRAB8ji&sln_&?9hA,?'@^!q0c$BV)M=GZ"q`b.i1DmN`J"MKA#dPGYUKm0*UKA)0.HYL0@mc^B_\h7^%_E9GuFn+g6Q
%OF<)fUeU*'J%:.F3N+FE^k654qs\gdo%I*8P;&g(DM2SF;?9UKp/ZIU0tiOD&%SVU^0-[\:g,7<pBi@<(6'[N?3a9QMBl/e0A0im
%=]DeRLcjQVg;DsJ35QuXI3J].SEktZ!77.8XaRkgf9D01PF)\G-\Y3Iehj6KBMQW`]^qPidPQPY=Srlj9QC#g$Wq-+`[-KOdjD1e
%)Smj94](BL6ARJK@F>R)]A5f78$%8I[,Qj75;`W=>*4]dQQ.M-<(KJ0c9N)W>"D&Er4P;M:@*]lrBs<nqhdcmVB<GJRq*ZKWC94-
%<i?u/i^L1+JN9eAKA-9HB6&>)b5*j+>&8&qD,7k]`(NdSBm3uA^_GJmPQaPO[l5u;U+98A/CiU^38h@?-+!:L%5rlorTO6]\[YVn
%[7e,[!X8&+%2.nr5/Gge[dUjCS_)X+!!Se+9>"uKP<4h*B;E6+R-9C;>\p-IEj/RjiG5[i>o+ijUuVo8S!H?"CmlWJ]"3\&X4ZOc
%#<:^d:@Eq*85"tt7M/$03$s=t+-+p1:8Ip^5JL8G&t+6-6da'qN304<rhlBb`M`inH\s<,<X,DgA4(CDHJ'i01s`shi/L,=dg37e
%"=8q7]j,1O^[#;jKdA"p2c1E1()PMpY8E)#<thQp_8CNRMZ(JEfBp@#7LDNjGApCNFN2+afOlOXhWFW))?gga=q;UI=$t2:pH^(,
%O1:qdqFI#X)S+8Y((D4n)3\EfZ?[Og&/8to:s-"Up97GF-#1TY'GV%%N]Zkr_U827ON)_'d\hSP1_mMIo32!6m<<M3U4B[oW.76/
%V[l#cK3@_MZILU88\d#s\%L)-jiOpu0f>6nHB"$jo4aI4/H&]#+6k`pq@?R[@nhWfKDr>ioY.N"Us"R==Ik+s\l#]mk<>eOkp5*>
%jF]k95P\%5I^eutp,"d4Yaenn&Kf2k8C)YF-W)98'@nXV;R=5Vc-VU<%LbhQ+Y[gL$-$,OHP%5$")Uj.Hf+?P<_`+9F7qZ(p>O]8
%[8D*NP5tGna>#qn3dJC9X4Q]L=&\&n[-X/df%%7jI\(+`oY)Tsie^(JBY.`5p3`RRHN1E4Wm7EMD5HUL8BeGd(05.OgZco=b]J/[
%76ugVT!#XYS<"0r+0O"dF3>/hT:n=g2M&Bh]YfQba^>L>U]QB5-&l-bgYqdNj/^osfoZ,J&ldEG>ErJ=nMj76PM`_qFRRKWbF<A.
%c7%[IDjU&>]jZU=hC[>9@3>sgFCi"ia5g,>cU6m\RmIh&DkILr9gM;Y=7!QZ.D(?ELje1K:3_-WNP9]llAL%HX'!Asm:g>j6_'[[
%Y8#.83kbKelt25%Q4`(c,`m&M`?"g'F<&uA29R'M]8MZK$11([\MX>R\)V+&&,WW_l8@`lqD^[\2k`-0W`KYnMX'T6cK\*I*e8%T
%JHN.:K#`j?(bSOpqX*(66*!:QV'OYe`fGH+DP+53QecMhKsl/q/-u)`;CR""</t;B!#8aS?.SVG(=pR&dJKbnd(D([8T0q%,GJWK
%R].=+$9*9QY-7^oMJ6p\b*8_#):kq2?3gQZV+V6^qT#`q.\aJkC$bUN+$=+s%6Z,F^r@GY+W?N>XG+^:8S[V-9\XR\X/g]lbC'-R
%O_>Jj_`.NgKacR\Z93LCAuhd?nZ(m2pt'hG=Pe\dln'7dKD`D?X!a<G?BV8K9/UXA2S6LpL$sD6=fiSuFXf"CoHa.'e,qc/(o%lS
%MVsdJfbs-i)qd:o3U][mSKGT<lW<sSKc?!qospOLnl<iV\Cl7p8\YLYF3X87+fB'm]@\'%nMZ9U;S,o7nYT6hIOVACY#mnC9^0`s
%.jg6TT;5;2Ds*r%3Euc+PGlC#SnrrA,T>P:(`?&:i$,^?KgV.`hsZlMs0L4B7:E(HBi/D'3gWYMYrG/!8_GJ_Yt9nLIVl)e>rn0,
%Cr5:SY>ki-HPiXBfl<AAE8t4GcQ0dY(c,H7hCu*c)Bk<9PPNOt"CacOkKD]p#M1sW29.ABXI2AYrdEE1dr;,F@X>]?[1H'#::r0V
%rp$u>$IE8"6K>SUMG.n">"fh_Zb!Z]\=RgR(p;E?%.Q=R,gO%b%Y`kn[YSpIrFShPj0')W0/SGWpDtERVDWJCm2Lqr4,RNbf/3@S
%Xm![2/s@^,<lA[B%k`Rm4i+3I])0^uX:'ZVSh3i3Huk8h9^?K(ejT/`9&Mbr")?12o*D2Vbb!f(E]U879?To<F>.5u/_Td:\`3^'
%p#;(/qN(:b;c"@^,b\Ef$-poZ-<==tUTDR*_BrfS+,?[u+-+c.RJUd1;3[A_L*XW\qDshc6D+0ilLERt*+6(8p?*AE.qQ'E,>aml
%KQ#1L`&L'2LG`J?WF)LG8C]E1oa9GaWkiIJ2>KPc8G2uCNsZ(<AO$tTB(G!KEo74</8$T:S)&=qDp^0.<6+sD^D>T\@i6^CoB4#>
%Ba0d'ha)R[/?+f5FX"YtQ<HJ1hAJCYRf2)o%>Yfp`8bkcOl'7'*`B#Na?#kE7scQecfr/JoZgRlr;ePV*j9QgmeV@(qM$*4&+$/*
%:)I[Eq#:6,ri\ON"OJ+2BX+JLFm+5f^i8n44_`3?K^j_JG8tiH"n.9Q4X9:K^A!-UfAHW&J,A&orp>+%8!!Sg5Q(-K\:Fg\Oad5Q
%J%<5<"fh!2bQFNL:P"5kPJ8-]<^:R,if8)c,*t0$[8LGtIf,S?e'JVTfK,fjja%qRV!QBh7CSei-jgNn$U7aK0%,&2.u7a#30;jG
%R`kMI-dd2[?DPEcO/L1[4d?9<cpbP7nUQr.0<]A#mco4m[gqXCRe<jl*Bs"dYNtZcfAY>f1dSa275;F9Dar/c+7;^u4S!&;dNhLR
%h@_-g'(3R*WCf6i$*+0S'GuDM@HuD,kA+?kqkcFI,,L43VRt=-7YN+jT's6ZS9oOmj1s-5mE8eMm'k[g1&Q:]^U_U/\K*TV5MVu\
%_9J+,S`)0W>D.bGoUp=id.<\s(U]LErAA7$/Yq>Cd`Z'pc\5W606NE4>Cm[UYR&;6@P";E?jXD89CR29j1s,jmE8eMlF5I`^[i*9
%If&,c]*,>3`Q.:JBs*h8bu);lKM%QoM]P/-S+GKiaWaN2J>@9W:;'ei+Pg1"^EVqmdDn]%T&rO(49jB=Ab<Z/HhT4"TW"9*'L=2+
%bh&6)*F[f8))XgY=nIj;/9)It8,"Ns`214KdM\>_W_W=4kVZegR\3+\O/-7+/l>aQL!XO)UK?ot8^k$`-iJ^6bDf,(.qlkGOWV:Y
%_C+@G+Rk]J569.2j3*rd97)Vnj;s?[J,Xrsr5\R3rbi<[hT(36"&Q5?=$I#4rc<"!+PHdeJ,IcNhnB%P+T"c*dpm<G:X'JhSr]&F
%g]k+bgfN/V;@Y].,A[="2#GT:T^_c\*PUSul1=?W^N=]b(Y2p=oI-QmD/B+%ld(1[r?Q4VcP`^s*bbG+%7AV]Wp-SX<eFss44qA;
%@)J?eg31N`_]RT@XH(;EM+gpQD_Y7R:+4ncXK4]^>ZkZ=TRb\);5-[7RS,1#@;g'jp[)U9#i=>`cZ.O*SXs.Mg8DJh%Mr?691GAL
%/ljU8rG97P:gd(A<K`jq&_]P2X&G0$lqCfqc0Rf$%&J!ha%l'[Y?-Sg(HQDP;,oS!-p-/)$<0TI]l48q$LbEn#5Yg)r-3/I3R+Q<
%])t*p]hW!\mSMB:L:AXrrn,ad\(gD(<<98#0&TjEhd(9&qctipEN.J$QN[cFKl[prDN*M7Zrr9%0g9oIn$uR&edrqPC_&GI#U97,
%fdqop^A^#Kb>3TSB5X$-I%P>e=aoot>rG?KR.I)c4g1@:QY_uQRdB;]=LqKQ%DK_J_)jn#&tNG3BL").JMa1R\_Aa#@JGZV@`5#Z
%oDW=9p0J&Ir4;j\9qV_!g%3&He8/THK&`^p,oG+",+Jq<=A$G3AVV-IIjpQ!J7CP=dBiJYYZV:7&DV*t\<olQ#$YB#3cfhqNC:#"
%8`f#d:R@l%rfY=('H8:``E7;Hn5JSY5hO[):f=l%lTSts%k^`N+Ok#[!2rS6TLNf^DQEXt-XigPpWSl3+:49JBoH$&n8Qa'Utq0e
%6K(oBp3+JX=7Xn,Hr3s#W+oj,\u3:1NaK"PU)pps&sdi;Z0j1i#k2`2g-1M-*MFB@L:>pN[?G=@)o*%gBBn%??=6_0KWS**_:Hp8
%\ejUR4CSAQk)jNFgNug:?)#.`S??g8HFgsLZ3ZLg"25%.AcVQ3bc]hG6RFBRO(tBW^lU!9kJoF+.mrH;M]jlIR6:>VrWX2p5J%*i
%M>S')[5#(E\e6jX.oj-6GXf'G^V+jjD<YD[VA,tHIG1"^5+46ajRTPm^oO>[eW`jEapILdU[c*#:&.q\P"HAigcB4C!!]PiqlD8#
%d^/ms\\`4J?\>KahB:?E9NSu4Q*7diY=2O,>*Ub?.m\#2W1B-Tbggr4n*A,S1]T8&]1J&6gm7pskXrgmSt8g:7ob/I>0:?KJQGkI
%W[aWAQ/Hel:WuN3/Z[#A,++EA:GAsjqQSF^lBKDp),`.LkTpe$Q+.(1iiW+fH<Dd7J":YE)dm:+]/eAJDo;Xn,-mG]JiY4kE6;e&
%h$=MRgr89YKFSdAV1P?F)hk'FcEB;2<e-iJ^si^F2j/<]%;\?KVlNBgZk)'^aUF^/&pjJ#ZffA/IA4TcInIt/Y(0H8H1TAf2;<Gk
%Y>Me=/1"D/hk>'P#U6ALQlSmSAG/,c`?nX<Ua7os*1Kj76,W6AUt/;&@#<V#]Hl0<ec'"cBII:P!T0hmK63/h8aJ,N?o8<dFbneQ
%*AfW)hk*Ak2Iq]>,%Vca56ecR&"i3"f&#"WSm\:CLSFh*jACCN0D*]2l$OGd8'M?nO&H4[T<f*@&JhPS6)adfft^cO+N0&>dh(Y*
%%cP*:5%W$RUc,kd>VBsmU.&:2Zm>(OR_Re2VVdF,.ghsI=QJJlr;DVC^C=AJoQ1B*eboBQ8:da/MPn9PU'Q0_<KW_E9!H#"%UgL[
%A/f,F'^34>oBiYqr`E@3cDOsO=/Gbn<<)fZC4pX,'C34.QBgaupa3#rEa4>/RMD]<+e^Ho_$rs8n:t"9do$6J@g?DG3+h1J\LS0;
%X"chO.Z"1'm"0X@9">EE!ZqBcNcq!_5+Eou$*l9(!W#5mJ@9U<aNQ:$foY$nK^Tp?;j8+>TN`g,7);Jg:PY\i7!#OS<T:j5`U6fs
%1c#$Z$]l+VDMm,m$g!\FQ<s@-*NJ@qp5)d'/Ki`(l"s!Y"MD)TIi1^S?Pm8u,<KO/%`W?0@;s<3,T?8$@;F]_B<+SL]@/iI&-$S%
%=8Sea*[!a@]3>L]YAVGU$/+D`6t-;H8>=N'FMYjP_&mQ<SrtYM1lWq.rsXj`Kr6]u'EsRi:q.GH3&Y#gmnbXECnMkg9fP37D[k"?
%CnUB&gkcKcZf","9o=\=&]Q0!R$GBrY%EGdY!H?AA('UY6uZOXm)<D?`Qm0hF>c&rDZQTEgKPT%p6qa$ch#LG*5OS+>>P'8+&e[O
%(*K-rag^1F;odf3lLh%]..>dF`RI.en_jB0,?]gV7^4#Mp-99qVcQ"8^^@hW&t0]WN"ZZk%q2E&+[T;MB\$RFAjP%.kh=#$>U5`f
%cE#dcB.F8,oRM$_Q'e:RO=78X`&pkmDX9qN/V7p-V<a48KQ_;j6?N=r\kk6(n,k,`HAp+d+oHdr',hX\b,EWOFNX,n'0tr?:l)Yk
%BT])JPE8<jM%^-s`@,,@^+othD[hnXMAV\b1O_T^%t]d3aC;927W6:*BOc6f_L^"$lG;+g\:-9b8CIp<MK6&fK''^;YV0#D*'reC
%Db\g%Ut,^AD2`7OJ't8+"e9Eg_(m,(AiC^(s6Te<$lr<$-[Hi'qa:/W^8B'+Gc+RN38oJrF+lSd$^$*#9[\Y$@\HF6G%*)OFCqZe
%Sg/ood0C:m+gfn;c=GSc>8@iaSa+BeTN54pL4/9V4iC<_!b%#,@4ju!@e\l3_d^sqbjCJ<*L!#V3lq&gCSBjIa02'9$#RG$c1XIE
%MD]bF2"j:Y2$KUBU5R7l/@duuhf3L.b3j,%/Alc'YR^/K[gYR-oZWJO@0T,c_I9caENb5UZAh?mQ9Ei)[Sn>*$b!'N,N??o/YSkQ
%!G(*QneaGY,\Z?fr(c:GY/1T516%WhF`"a!pMU@?fW[KdqSO?TW9qCsC5b4tDN(R_HTkP$3Y,V',WY`3N:j0hb$4%FL=?o#p3C3:
%O5JRbPRgZ?cURe<HdMl?S=&Q@TP3.1'nj+.Sp"WaX8(JkE5a6RqUk)Z@i/6.37>U@1s1"O6'P!@[G(Uh\#D0$[)$;ohq](ThY#Lt
%#7ajVe(s[AroN0:\2UuV)Plo_(4[gd???KX&WccRJ#r*uaP$teg`&R;:EZ5:U*.qf?5u6$l5UB<@[2<gDPqCANi.*A<ij/f:@&Qa
%QIq1:H4Lq2]&sb9Y]q2?l2\M0I5$L3CQ,)WN#goW9i\F/CHqp,')igjMC:pYUW$3;6u1kLWLsJ,i;hc\d!sc?YK#c(USGK$DItC'
%Mr1R0^D:H].V*6Zd_F""E;=DLYfm?:'BeE]+;2h(!ArT*RW[bUorcspJ6;O%S(&"6EI"#EIR)"<$l#WB(&7dj7IAY)rRO)VOGsP`
%!<TVM(GPb\)T?+P!HMd=j9_uA8qs4q.ub`!8f9V4:kS]=]n868i\Ms>W]S+KQk.b8dCGEq1GJ>/q/eb.aFi/VPF1:P9JPk7*=p-_
%h@uk/OXJnj)qV:bpfBY[R^`=OEp3MoJ#WJB5Q9W6hu<$s^]2bY5:s_/s4?0,bO>JOT76O<mskA8^\\QAo&np/qYRn^rS\9sK"q=m
%l_!VEj\NYko=t7o:VX[AoDe^.rsoD`*@Ld`huDa:omcnqJ,'$Eb1aY5~>
%AI9_PrivateDataEnd
